import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI

# 1) –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")
RENDER_URL      = os.getenv("RENDER_EXTERNAL_URL")
PORT            = int(os.environ.get("PORT", 10000))

if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not RENDER_URL:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_TOKEN, OPENAI_API_KEY –∏–ª–∏ RENDER_EXTERNAL_URL")

# 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# 3) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–º—è—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    # –ë–µ—Ä—ë–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ user_data, –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": user_text})

    # –§–æ—Ä–º–∏—Ä—É–µ–º prompt: —Å–∏—Å—Ç–µ–º–Ω–æ–µ + –¥–∏–∞–ª–æ–≥
    messages = [
        {"role": "system", "content": (
            "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: "
            "—É—Ç–æ—á–Ω–∏ —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –í–µ–¥–∏ —Å–µ–±—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
        )}
    ] + history

    try:
        # 4) –í—ã–∑—ã–≤–∞–µ–º OpenAI
        resp = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = resp.choices[0].message.content

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é, –¥–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        history.append({"role": "assistant", "content": reply})
        context.user_data["history"] = history[-10:]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ OpenAI / Telegram:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏.")

# 5) –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook...")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –≤ Telegram –Ω–∞ –Ω–∞—à URL
    webhook_url = f"{RENDER_URL}/webhook"
    app.bot.set_webhook(webhook_url)
    print(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–æ–¥ python-telegram-bot
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url
    )

if __name__ == "__main__":
    main()

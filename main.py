import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# ID –≥—Ä—É–ø–ø—ã –≤—Ä–∞—á–µ–π (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID)
DOCTORS_GROUP_ID = -1002529967465

# OpenAI
openai = OpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ Google
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –∏–∑ services.json
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES = json.load(f)

def get_service_info(query):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Å–ª—É–≥–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ services.json"""
    q = query.lower()

    # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ü–µ–Ω—É/–ø—Ä–∞–π—Å
    if any(word in q for word in [
        "—É—Å–ª—É–≥", "–ø—Ä–∞–π—Å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω—ã", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "–ø–µ—Ä–µ—á–µ–Ω—å", "—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ", "–ø—Ä–∞–π—Å–ª–∏—Å—Ç"
    ]):
        result = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏:*"]
        for key, data in SERVICES.items():
            line = f"‚Äî *{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ({data['—Ü–µ–Ω–∞']})"
            result.append(line)
        return "\n".join(result)
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ –ø–æ –∫–ª—é—á–∞–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    for key, data in SERVICES.items():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if data['–Ω–∞–∑–≤–∞–Ω–∏–µ'].lower() in q:
            text = f"*{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}*\n–¶–µ–Ω–∞: {data['—Ü–µ–Ω–∞']}"
            return text
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–∞–º
        for kw in data.get('–∫–ª—é—á–∏', []):
            if kw.lower() in q:
                text = f"*{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}*\n–¶–µ–Ω–∞: {data['—Ü–µ–Ω–∞']}"
                return text
    return None

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
def extract_fields(text):
    name = re.search(r'(–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)', text)
    serv = re.search(r'(–Ω–∞|—Ö–æ—á—É)\s+([–∞-—è—ëa-z\s]+?)(?=\s*(–≤|\d{1,2}[.:]))', text, re.IGNORECASE)
    date = re.search(r'(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})', text)
    time_ = re.search(r'\b(\d{1,2}:\d{2})\b', text)
    phone = re.search(r'(\+?\d{7,15})', text)

    date_str = None
    if date:
        d = date.group(1)
        if "–∑–∞–≤—Ç—Ä–∞" in d:
            date_str = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in d:
            date_str = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            date_str = d

    return {
        "–ò–º—è": name.group(2) if name else None,
        "–£—Å–ª—É–≥–∞": serv.group(2).strip().capitalize() if serv else None,
        "–î–∞—Ç–∞": date_str,
        "–í—Ä–µ–º—è": time_.group(1) if time_ else None,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone.group(1) if phone else None,
    }

# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # ---- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —É—Å–ª—É–≥–∞–º ----
    service_reply = get_service_info(text)
    if service_reply:
        await update.message.reply_text(service_reply, parse_mode="Markdown")
        return

    # ---- –í–µ–¥–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è OpenAI ----
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    # GPT: –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    messages = [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
                       "–£—Ç–æ—á–Ω–∏, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        }
    ] + history[-10:]

    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI üòî")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–∞—è ‚Äî –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∏ —à–ª—ë–º –≤—Ä–∞—á–∞–º
    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    if all(form.get(k) for k in required):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)

        # –®–∞–±–ª–æ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã –≤—Ä–∞—á–µ–π
        doctors_msg = (
            f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!*\n"
            f"–ò–º—è: {form['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –≤—Ä–∞—á–µ–π
        await context.bot.send_message(
            chat_id=DOCTORS_GROUP_ID,
            text=doctors_msg,
            parse_mode="Markdown"
        )

        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}

# –ó–∞–ø—É—Å–∫
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

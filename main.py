import os
import re
import json
import gspread
import dateparser
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, filters
)
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
GROUP_CHAT_ID  = -1002529967465

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI ===
openai = OpenAI(api_key=OPENAI_API_KEY)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets —á–µ—Ä–µ–∑ Secret File ===
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

# === –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ ===
with open("services.json", "r", encoding="utf-8") as f:
    SERVICE_DICT = json.load(f)

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def extract_fields(text):
    result = {}
    lower = text.lower()

    # –ò–º—è
    m_name = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)', text)
    if m_name:
        result["–ò–º—è"] = m_name.group(1)
        print("‚úÖ –ò–º—è:", result["–ò–º—è"])

    # –¢–µ–ª–µ—Ñ–æ–Ω
    m_phone = re.search(r'(\+?\d{7,15})', text)
    if m_phone:
        result["–¢–µ–ª–µ—Ñ–æ–Ω"] = m_phone.group(1)
        print("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω:", result["–¢–µ–ª–µ—Ñ–æ–Ω"])

    # –í—Ä–µ–º—è
    m_time = re.search(r'(\d{1,2}[:\.-]\d{2})', text)
    if m_time:
        result["–í—Ä–µ–º—è"] = m_time.group(1).replace(".", ":").replace("-", ":")
        print("‚úÖ –í—Ä–µ–º—è:", result["–í—Ä–µ–º—è"])

    # –î–∞—Ç–∞ (—Å –±–∞–∑–æ–≤–æ–π —Ç–æ—á–∫–æ–π –æ—Ç—Å—á—ë—Ç–∞)
    parsed_date = dateparser.parse(text, settings={
        "TIMEZONE": "Asia/Almaty",
        "TO_TIMEZONE": "Asia/Almaty",
        "RETURN_AS_TIMEZONE_AWARE": False,
        "RELATIVE_BASE": datetime(2025, 5, 21)
    })
    if parsed_date:
        result["–î–∞—Ç–∞"] = parsed_date.strftime("%d.%m.%Y")
        print("‚úÖ –î–∞—Ç–∞:", result["–î–∞—Ç–∞"])

    # –£—Å–ª—É–≥–∞ (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
    for key, value in SERVICE_DICT.items():
        for synonym in value["–∫–ª—é—á–∏"]:
            if synonym in lower:
                result["–£—Å–ª—É–≥–∞"] = value["–Ω–∞–∑–≤–∞–Ω–∏–µ"] + " ‚Äî " + value["—Ü–µ–Ω–∞"]
                print("‚úÖ –£—Å–ª—É–≥–∞:", result["–£—Å–ª—É–≥–∞"])
                return result

    return result

# === –û—Ç–≤–µ—Ç –Ω–∞ /id ===
async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Chat ID: `{update.message.chat_id}`", parse_mode='Markdown')

# === –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
def record_submission(form, context):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
    print("üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets:", row)
    sheet.append_row(row)
    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"–ò–º—è: {row[0]}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {row[1]}\n"
        f"–£—Å–ª—É–≥–∞: {row[2]}\n"
        f"–î–∞—Ç–∞: {row[3]} –≤ {row[4]}"
    )
    context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

# === –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    print("üîé –ò—Ç–æ–≥ —Ñ–æ—Ä–º—ã:", form)

    # –û—Ç–≤–µ—Ç GPT (–≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º)
    messages = [{
        "role": "system",
        "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —É—Å–ª—É–≥–∞–º –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —É—Å–ª—É–≥–∏. –£—Ç–æ—á–Ω—è–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è: –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É, –≤—Ä–µ–º—è, –Ω–æ–º–µ—Ä."
    }] + history[-10:]
    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ OpenAI")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞: –µ—Å–ª–∏ –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ, –∑–∞–ø–∏—Å–∞—Ç—å
    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    if all(form.get(k) for k in required):
        print("‚úÖ –í—Å–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É")
        record_submission(form, context)
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ–º...", form)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("id", show_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
DOCTORS_GROUP_ID = -1002529967465

openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Google Sheets ---
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# --- –£—Å–ª—É–≥–∏ –∏ —Å–ª–æ—Ç—ã ---
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES_DICT = json.load(f)
SERVICES = list(SERVICES_DICT.values())

CANCEL_KEYWORDS = ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "—É–¥–∞–ª–∏—Ç—å", "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"]
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "–ø—Ä–∏—ë–º", "appointment", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONSULT_WORDS = ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "—É—Å–ª—É–≥–∏", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]

def is_cancel_intent(text):
    q = text.lower()
    return any(kw in q for kw in CANCEL_KEYWORDS)

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_consult_intent(text):
    q = text.lower()
    return any(w in q for w in CONSULT_WORDS)

def match_service(text):
    q = text.lower()
    # –ü–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–æ–≥–æ!)
    m = re.match(r"\b(\d{1,2})\b", q)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(SERVICES):
            return SERVICES[idx]["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    # –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ‚Äî —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ!
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower() == q.strip():
            return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
        for kw in s.get("–∫–ª—é—á–∏", []):
            if kw.lower() == q.strip():
                return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower() in q:
            return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
        for kw in s.get("–∫–ª—é—á–∏", []):
            if kw.lower() in q:
                return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    return None

def build_services_list():
    lines = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:*"]
    for i, s in enumerate(SERVICES, 1):
        lines.append(f"{i}. *{s['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ‚Äî {s['—Ü–µ–Ω–∞']}")
    return "\n".join(lines)

def extract_fields(text):
    data = {}
    # –ò–º—è ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ—Ç–∫–æ —É–∫–∞–∑–∞–Ω–æ!
    m = re.search(r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∏–º—è)\s*[:,\-]?[\s]*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-zA-Z]+)", text, re.I)
    if m:
        data["–ò–º—è"] = m.group(1).capitalize()
    # –¢–µ–ª–µ—Ñ–æ–Ω
    m = re.search(r"(\+7\d{10}|8\d{10}|7\d{10}|\d{10,11})", text.replace(" ", ""))
    if m:
        phone = m.group(1)
        if phone.startswith("8"):
            phone = "+7" + phone[1:]
        elif phone.startswith("7") and len(phone) == 11:
            phone = "+7" + phone[1:]
        data["–¢–µ–ª–µ—Ñ–æ–Ω"] = phone
    # –£—Å–ª—É–≥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ—Ç–∫–æ —É–∫–∞–∑–∞–Ω–æ!
    svc = match_service(text)
    if svc:
        data["–£—Å–ª—É–≥–∞"] = svc
    # –î–∞—Ç–∞
    date_keywords = {"—Å–µ–≥–æ–¥–Ω—è": 0, "–∑–∞–≤—Ç—Ä–∞": 1, "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": 2}
    m = re.search(r"(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[./-]\d{1,2}(?:[./-]\d{2,4})?)", text.lower())
    if m:
        d = m.group(1)
        now = datetime.now()
        if d in date_keywords:
            data["–î–∞—Ç–∞"] = (now + timedelta(days=date_keywords[d])).strftime("%d.%m.%Y")
        else:
            for fmt in ("%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%d.%m", "%d/%m", "%d-%m"):
                try:
                    date_obj = datetime.strptime(d, fmt)
                    if date_obj.year < 2000:
                        date_obj = date_obj.replace(year=now.year)
                    data["–î–∞—Ç–∞"] = date_obj.strftime("%d.%m.%Y")
                    break
                except:
                    continue
            else:
                data["–î–∞—Ç–∞"] = d
    # –í—Ä–µ–º—è
    m = re.search(r"(\d{1,2})[:.\-](\d{2})", text)
    if m:
        h, m_ = int(m.group(1)), m.group(2)
        if 0 <= h <= 23 and 0 <= int(m_) <= 59:
            data["–í—Ä–µ–º—è"] = f"{h:02d}:{m_}"
    return data

def is_form_complete(form):
    return all(form.get(k) for k in ("–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"))

def is_valid_name(name):
    bad = {"–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π", "–¥–æ–±—Ä–æ–≥–æ", "–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "–∞–¥–º–∏–Ω", "–ø–∞—Ü–∏–µ–Ω—Ç", "–∫–ª–∏–µ–Ω—Ç"}
    if not name or name.lower() in bad or len(name) > 50:
        return False
    parts = name.strip().split()
    # –ò–º—è –∏–ª–∏ –∏–º—è+—Ñ–∞–º–∏–ª–∏—è, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    if 1 <= len(parts) <= 2 and all(p[0].isupper() and p.isalpha() for p in parts):
        return True
    return False

def get_taken_slots(—É—Å–ª—É–≥–∞, –¥–∞—Ç–∞):
    records = sheet.get_all_records()
    taken = []
    for rec in records:
        usluga_cell = str(rec.get("–£—Å–ª—É–≥–∞", "")).strip().lower()
        date_cell = str(rec.get("–î–∞—Ç–∞", "")).strip()
        if usluga_cell == —É—Å–ª—É–≥–∞.strip().lower() and date_cell == –¥–∞—Ç–∞.strip():
            time_cell = str(rec.get("–í—Ä–µ–º—è", "")).strip()
            taken.append(time_cell)
    return taken

async def register_and_notify(form, update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now_ts = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [
        form["–ò–º—è"],
        form["–¢–µ–ª–µ—Ñ–æ–Ω"],
        form["–£—Å–ª—É–≥–∞"],
        form["–î–∞—Ç–∞"],
        form["–í—Ä–µ–º—è"],
        now_ts,
        chat_id
    ]
    sheet.append_row(row)
    msg = (
        f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
        f"–ò–º—è: {form['–ò–º—è']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
        f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
        f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
        f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, –∂–¥—ë–º –≤–∞—Å!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # 1. –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ä–º—É
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": text})
    context.user_data["history"] = history[-20:]
    form = context.user_data.get("form", {})

    # 2. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    if is_consult_intent(text):
        await update.message.reply_text(build_services_list(), parse_mode="Markdown")
        return

    # 3. –Ø–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ —à–∞–≥–∞–º: –∏–º—è -> —Ç–µ–ª–µ—Ñ–æ–Ω -> —É—Å–ª—É–≥–∞ -> –¥–∞—Ç–∞ -> –≤—Ä–µ–º—è
    fields_order = ["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"]
    prompts = {
        "–ò–º—è": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, –µ—Å–ª–∏ –º–æ–∂–Ω–æ).",
        "–¢–µ–ª–µ—Ñ–æ–Ω": "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.",
        "–£—Å–ª—É–≥–∞": "–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ.)",
        "–î–∞—Ç–∞": "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 30.05.25 –∏ —Ç.–¥.)",
        "–í—Ä–µ–º—è": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–µ–º)."
    }
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v and (not form.get(k) or form.get(k).lower() != v.lower()):
            form[k] = v
    context.user_data["form"] = form

    # 4. –ù–∞–π–¥–∏ –ø–µ—Ä–≤–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    for field in fields_order:
        if not form.get(field):
            # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            if field == "–í—Ä–µ–º—è" and form.get("–£—Å–ª—É–≥–∞") and form.get("–î–∞—Ç–∞"):
                svc = form["–£—Å–ª—É–≥–∞"]
                slots = []
                for key, s in SERVICES_DICT.items():
                    if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
                        slots = s.get("—Å–ª–æ—Ç—ã", [])
                        break
                taken_slots = get_taken_slots(svc, form["–î–∞—Ç–∞"])
                free_slots = [t for t in slots if t not in taken_slots]
                if free_slots:
                    slot_texts = [f"{i+1}. {t}" for i, t in enumerate(free_slots)]
                    await update.message.reply_text(
                        "–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É:\n" +
                        "\n".join(slot_texts) +
                        "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 12:00)."
                    )
                    context.user_data["awaiting_time"] = {"slots": free_slots}
                else:
                    await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ —É—Å–ª—É–≥—É.")
                return
            # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ ‚Äî –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫
            if field == "–£—Å–ª—É–≥–∞":
                await update.message.reply_text(build_services_list(), parse_mode="Markdown")
            await update.message.reply_text(prompts[field])
            return

    # 5. –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è ‚Äî –∑–∞–ø–∏—à–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º—É
    if context.user_data.get("awaiting_time"):
        slots = context.user_data["awaiting_time"]["slots"]
        value = text.strip()
        slot_num = None
        if re.fullmatch(r"\d+", value):
            slot_num = int(value) - 1
            if 0 <= slot_num < len(slots):
                form["–í—Ä–µ–º—è"] = slots[slot_num]
        else:
            for t in slots:
                if value in t:
                    form["–í—Ä–µ–º—è"] = t
        context.user_data["form"] = form
        if form.get("–í—Ä–µ–º—è"):
            del context.user_data["awaiting_time"]
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–æ–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è).")
            return

    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø–∏—Å—å
    if is_form_complete(form):
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ ---
        if not is_valid_name(form["–ò–º—è"]):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤). –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏!"
            )
            form["–ò–º—è"] = ""
            context.user_data["form"] = form
            return
        svc = form["–£—Å–ª—É–≥–∞"]
        slots = []
        for key, s in SERVICES_DICT.items():
            if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
                slots = s.get("—Å–ª–æ—Ç—ã", [])
                break
        if slots and form["–í—Ä–µ–º—è"] not in slots:
            await update.message.reply_text(
                f"–í—Ä–µ–º—è {form['–í—Ä–µ–º—è']} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —É—Å–ª—É–≥–∏ {svc}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."
            )
            form["–í—Ä–µ–º—è"] = ""
            context.user_data["form"] = form
            return
        taken_slots = get_taken_slots(form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"])
        if form["–í—Ä–µ–º—è"] in taken_slots:
            await update.message.reply_text("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            form["–í—Ä–µ–º—è"] = ""
            context.user_data["form"] = form
            return
        await register_and_notify(form, update, context)
        context.user_data["form"] = {}
        return

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler()

    async def start_scheduler(_: ContextTypes.DEFAULT_TYPE):
        pass  # reminders –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–∫ —É —Ç–µ–±—è

    app.post_init = start_scheduler

    RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
    if RENDER_URL.startswith("https://"):
        RENDER_URL = RENDER_URL.replace("https://", "")
    if RENDER_URL.startswith("http://"):
        RENDER_URL = RENDER_URL.replace("http://", "")
    if RENDER_URL.endswith("/"):
        RENDER_URL = RENDER_URL.rstrip("/")
    webhook = f"https://{RENDER_URL}/webhook"

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

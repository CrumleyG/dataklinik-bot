import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
DOCTORS_GROUP_ID = -1002529967465  # –≤–∞—à —á–∞—Ç –¥–ª—è –≤—Ä–∞—á–µ–π

# --- OpenAI ---
openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Google Sheets ---
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –∏ —Å–ª–æ—Ç–æ–≤ ---
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES_DICT = json.load(f)
SERVICES = list(SERVICES_DICT.values())

CANCEL_KEYWORDS = ["–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"]
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "–Ω–∞ –ø—Ä–∏—ë–º", "appointment", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONSULT_WORDS = ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "–∫–∞–∫–∏–µ –µ—Å—Ç—å"]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_cancel_intent(text):
    q = text.lower()
    return any(kw in q for kw in CANCEL_KEYWORDS)

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_consult_intent(text):
    q = text.lower()
    return any(w in q for w in CONSULT_WORDS)

def match_service(text):
    q = text.lower()
    m = re.match(r"^\s*(\d+)\s*$", text)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(SERVICES):
            return SERVICES[idx]["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    for key, s in SERVICES_DICT.items():
        title = s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower()
        if title in q:
            return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
        for kw in s.get("–∫–ª—é—á–∏", []):
            if kw.lower() in q:
                return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    return None

def build_services_list():
    lines = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:*"]
    for i, s in enumerate(SERVICES, 1):
        lines.append(f"{i}. *{s['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ‚Äî {s['—Ü–µ–Ω–∞']}")
    return "\n".join(lines)

def extract_fields(text):
    data = {}
    m = re.search(r"(?:–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)", text)
    if m:
        data["–ò–º—è"] = m.group(1)
    m = re.search(r"(\+?\d{7,15})", text)
    if m:
        data["–¢–µ–ª–µ—Ñ–æ–Ω"] = m.group(1)
    svc = match_service(text)
    if svc:
        data["–£—Å–ª—É–≥–∞"] = svc
    dm = re.search(r"(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[.\-/]\d{1,2}(?:[.\-/]\d{2,4})?)", text)
    if dm:
        d = dm.group(1)
        if "–∑–∞–≤—Ç—Ä–∞" in d:
            data["–î–∞—Ç–∞"] = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in d:
            data["–î–∞—Ç–∞"] = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            data["–î–∞—Ç–∞"] = d
    tm = re.search(r"\b(\d{1,2}[:.]\d{2})\b", text)
    if tm:
        data["–í—Ä–µ–º—è"] = tm.group(1).replace(".", ":")
    return data

def is_form_complete(form):
    return all(form.get(k) for k in ("–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"))

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ ---
def get_taken_slots(—É—Å–ª—É–≥–∞, –¥–∞—Ç–∞):
    """
    –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ –∏ –¥–∞—Ç—ã.
    """
    records = sheet.get_all_records()
    taken = []
    for rec in records:
        if rec.get("–£—Å–ª—É–≥–∞", "").strip().lower() == —É—Å–ª—É–≥–∞.strip().lower() and \
           rec.get("–î–∞—Ç–∞", "").strip() == –¥–∞—Ç–∞.strip():
            taken.append(rec.get("–í—Ä–µ–º—è", "").strip())
    return taken

# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ ---
def find_last_booking(chat_id):
    records = sheet.get_all_records()
    last = None
    for idx, rec in enumerate(records, start=2):
        if str(rec.get("ChatID", "")) == str(chat_id):
            last = (idx, rec)
    return last if last else (None, None)

async def register_and_notify(form, update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now_ts = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [
        chat_id,
        form["–ò–º—è"],
        form["–¢–µ–ª–µ—Ñ–æ–Ω"],
        form["–£—Å–ª—É–≥–∞"],
        form["–î–∞—Ç–∞"],
        form["–í—Ä–µ–º—è"],
        now_ts
    ]
    sheet.append_row(row)
    msg = (
        f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
        f"–ò–º—è: {form['–ò–º—è']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
        f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
        f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
        f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã / –∏–∑–º–µ–Ω–µ–Ω–∏—è ---
async def handle_cancel_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    chat_id = update.effective_chat.id
    row_idx, rec = find_last_booking(chat_id)
    if not rec:
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    # –æ—Ç–º–µ–Ω–∞
    if "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" in text:
        sheet.delete_row(row_idx)
        msg = (
            f"‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\n"
            f"{rec['–ò–º—è']}, {rec['–£—Å–ª—É–≥–∞']} –Ω–∞ {rec['–î–∞—Ç–∞']} {rec['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    # –ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è
    svc = rec["–£—Å–ª—É–≥–∞"]
    date = rec["–î–∞—Ç–∞"]
    # –°–ª–æ—Ç—ã —É—Å–ª—É–≥–∏ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–∑ SERVICES_DICT
    slots = SERVICES_DICT.get(svc.lower(), {}).get("—Å–ª–æ—Ç—ã")
    if not slots:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ –∫–ª—é—á—É, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)
        for key, s in SERVICES_DICT.items():
            if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
                slots = s.get("—Å–ª–æ—Ç—ã", [])
                break
    if not slots:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö.")
        return
    # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
    taken_slots = get_taken_slots(svc, date)
    free_slots = [t for t in slots if t not in taken_slots or t == rec.get("–í—Ä–µ–º—è")]
    if not free_slots:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
        return
    # —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    text_slots = ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç:"]
    for i, t in enumerate(free_slots, 1):
        text_slots.append(f"{i}. {t}")
    await update.message.reply_text("\n".join(text_slots))
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
    context.user_data["awaiting_slot"] = {"row": row_idx, "slots": free_slots, "record": rec}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ ---
async def handle_slot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("awaiting_slot")
    if not state:
        return False
    text = update.message.text.strip()
    if not re.fullmatch(r"\d+", text):
        return False
    idx = int(text) - 1
    slots = state["slots"]
    if idx < 0 or idx >= len(slots):
        return False
    new_time = slots[idx]
    row_idx = state["row"]
    sheet.update_cell(row_idx, 6, new_time)
    rec = state["record"]
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}.")
    msg = (
        f"‚úèÔ∏è –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–º–µ–Ω—è–ª –≤—Ä–µ–º—è:\n"
        f"{rec['–ò–º—è']}, —É—Å–ª—É–≥–∞ {rec['–£—Å–ª—É–≥–∞']}\n"
        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è: {rec['–î–∞—Ç–∞']} {new_time}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    del context.user_data["awaiting_slot"]
    return True

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%d.%m.%Y")
    records = sheet.get_all_records()
    for rec in records:
        if rec.get("–î–∞—Ç–∞") == today:
            chat_id = rec.get("ChatID")
            svc = rec.get("–£—Å–ª—É–≥–∞")
            time_ = rec.get("–í—Ä–µ–º—è")
            await context.bot.send_message(
                chat_id,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å—å –Ω–∞ *{svc}* –≤ *{time_}*.",
                parse_mode="Markdown"
            )

# --- –ì–ª–∞–≤–Ω–æ–µ: —Ö–µ–Ω–¥–ª–µ—Ä –∏ –∑–∞–ø—É—Å–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if is_cancel_intent(text):
        return await handle_cancel_or_edit(update, context)
    if context.user_data.get("awaiting_slot"):
        handled = await handle_slot_selection(update, context)
        if handled:
            return
    if is_consult_intent(text):
        return await update.message.reply_text(
            build_services_list(), parse_mode="Markdown"
        )
    form = context.user_data.get("form", {})
    extracted = extract_fields(text)
    form.update(extracted)
    context.user_data["form"] = form
    if is_form_complete(form):
        await register_and_notify(form, update, context)
        context.user_data["form"] = {}
        return
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": text})
    context.user_data["history"] = history[-20:]
    ai_system = (
        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –±–æ—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏. –ü–æ–º–æ–≥–∞–µ—à—å —Å–æ–±—Ä–∞—Ç—å –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω, –£—Å–ª—É–≥—É, –î–∞—Ç—É, –í—Ä–µ–º—è.\n"
        "–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π. –î–ª—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫:\n"
        + build_services_list()
    )
    msgs = [{"role": "system", "content": ai_system}] + history[-10:]
    try:
        resp = openai.chat.completions.create(model="gpt-4o", messages=msgs)
        reply = resp.choices[0].message.content
    except Exception:
        return await update.message.reply_text("–û—à–∏–±–∫–∞ AI ü§ñ")
    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    context.user_data["history"] = history[-20:]
    form = context.user_data.get("form", {})
    if is_form_complete(form):
        await register_and_notify(form, update, context)
        context.user_data["form"] = {}

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler()

    # üìå –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop
    async def start_scheduler(_: ContextTypes.DEFAULT_TYPE):
        scheduler.add_job(send_reminders, "cron", hour=9, minute=0, args=[app.bot])
        scheduler.start()

    app.post_init = start_scheduler

    RENDER_URL = os.getenv("RENDER_URL", "").strip()
    webhook = f"https://{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env (–∏–ª–∏ –∏–∑ Render ENV)
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.getenv("PORT", 10000))

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–º—è—Ç—å—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": update.message.text})

    messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: "
                "—É—Ç–æ—á–Ω–∏ —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –í–µ–¥–∏ —Å–µ–±—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
            ),
        }
    ] + history

    try:
        resp = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = resp.choices[0].message.content

        history.append({"role": "assistant", "content": reply})
        context.user_data["history"] = history[-10:]

        await update.message.reply_text(reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ handle_message:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.")

# 4. –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook‚Ä¶")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    if not RENDER_URL:
        raise RuntimeError("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –µ—Å–ª–∏ RENDER_URL –ø—Ä–∏—à—ë–ª –±–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ‚Äî –¥–æ–ø–æ–ª–Ω–∏–º
    if not RENDER_URL.startswith("http"):
        external = "https://" + RENDER_URL
    else:
        external = RENDER_URL

    # path –∏ –ø–æ–ª–Ω—ã–π URL webhook-–∞
    url_path = "webhook"
    webhook_url = f"{external}/{url_path}"
    print("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook:", webhook_url)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä, Telegram —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç —ç—Ç–æ—Ç –ø—É—Ç—å
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
DOCTORS_GROUP_ID = -1002529967465

openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Google Sheets ---
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# --- –£—Å–ª—É–≥–∏ –∏ —Å–ª–æ—Ç—ã ---
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES_DICT = json.load(f)
SERVICES = list(SERVICES_DICT.values())

CANCEL_KEYWORDS = ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "—É–¥–∞–ª–∏—Ç—å", "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"]
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "–ø—Ä–∏—ë–º", "appointment", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONSULT_WORDS = ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "—É—Å–ª—É–≥–∏", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]

def is_cancel_intent(text):
    q = text.lower()
    return any(kw in q for kw in CANCEL_KEYWORDS)

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_consult_intent(text):
    q = text.lower()
    return any(w in q for w in CONSULT_WORDS)

def match_service(text):
    q = text.lower()
    m = re.match(r"\b(\d{1,2})\b", q)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(SERVICES):
            return SERVICES[idx]["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower() in q:
            return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
        for kw in s.get("–∫–ª—é—á–∏", []):
            if kw.lower() in q:
                return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    return None

def build_services_list():
    lines = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:*"]
    for i, s in enumerate(SERVICES, 1):
        lines.append(f"{i}. *{s['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ‚Äî {s['—Ü–µ–Ω–∞']}")
    return "\n".join(lines)

# --- –ß–µ—Ç–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –ø–æ–ª–µ–π ---
def extract_name(text):
    m = re.search(r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∏–º—è)\s*[:,\-]?[\s]*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-zA-Z]+)", text, re.I)
    if m:
        return m.group(1).capitalize()
    m = re.match(r"^\s*—è\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-zA-Z]+)\b", text, re.I)
    if m:
        return m.group(1).capitalize()
    m = re.match(r"^\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-zA-Z]+)\s*$", text, re.I)
    if m:
        return m.group(1).capitalize()
    return None

def extract_phone(text):
    m = re.search(r"(\+7\d{10}|8\d{10}|7\d{10}|\d{10,11})", text.replace(" ", ""))
    if m:
        phone = m.group(1)
        if phone.startswith("8"):
            phone = "+7" + phone[1:]
        elif phone.startswith("7") and len(phone) == 11:
            phone = "+7" + phone[1:]
        return phone
    return None

def extract_date(text):
    date_keywords = {"—Å–µ–≥–æ–¥–Ω—è": 0, "–∑–∞–≤—Ç—Ä–∞": 1, "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞": 2}
    m = re.search(r"(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[./-]\d{1,2}(?:[./-]\d{2,4})?)", text.lower())
    now = datetime.now()
    if m:
        d = m.group(1)
        if d in date_keywords:
            return (now + timedelta(days=date_keywords[d])).strftime("%d.%m.%Y")
        for fmt in ("%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%d.%m", "%d/%m", "%d-%m"):
            try:
                date_obj = datetime.strptime(d, fmt)
                if date_obj.year < 2000:
                    date_obj = date_obj.replace(year=now.year)
                return date_obj.strftime("%d.%m.%Y")
            except:
                continue
        return d
    return None

def extract_time(text):
    m = re.search(r"(\d{1,2})[:.\-](\d{2})", text)
    if m:
        h, m_ = int(m.group(1)), m.group(2)
        if 0 <= h <= 23 and 0 <= int(m_) <= 59:
            return f"{h:02d}:{m_}"
    return None

def get_service_object(service_name):
    for s in SERVICES:
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == service_name.strip().lower():
            return s
    return None

def is_form_complete(form):
    return all(form.get(k) for k in ("–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"))

def get_taken_slots(—É—Å–ª—É–≥–∞, –¥–∞—Ç–∞):
    records = sheet.get_all_records()
    taken = []
    for rec in records:
        usluga_cell = str(rec.get("–£—Å–ª—É–≥–∞", "")).strip().lower()
        date_cell = str(rec.get("–î–∞—Ç–∞", "")).strip()
        if usluga_cell == —É—Å–ª—É–≥–∞.strip().lower() and date_cell == –¥–∞—Ç–∞.strip():
            time_cell = str(rec.get("–í—Ä–µ–º—è", "")).strip()
            taken.append(time_cell)
    return taken

def find_last_booking(chat_id):
    records = sheet.get_all_records()
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è Chat ID
    id_keys = ["Chat ID", "chat_id", "Chat Id", "chatid", "id"]
    last = None
    for idx, rec in enumerate(records, start=2):
        rec_chat_id = None
        for key in id_keys:
            if key in rec:
                rec_chat_id = rec[key]
                break
        if rec_chat_id is not None and str(rec_chat_id).strip() == str(chat_id).strip():
            last = (idx, rec)
    return last if last else (None, None)

async def register_and_notify(form, update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now_ts = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [
        form["–ò–º—è"],
        form["–¢–µ–ª–µ—Ñ–æ–Ω"],
        form["–£—Å–ª—É–≥–∞"],
        form["–î–∞—Ç–∞"],
        form["–í—Ä–µ–º—è"],
        chat_id,
        now_ts
    ]
    sheet.append_row(row)
    msg = (
        f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
        f"–ò–º—è: {form['–ò–º—è']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
        f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
        f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
        f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, –∂–¥—ë–º –≤–∞—Å!")
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
    context.user_data.clear()

async def handle_cancel_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    chat_id = update.effective_chat.id
    row_idx, rec = find_last_booking(chat_id)
    if not rec:
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    if "–æ—Ç–º–µ–Ω–∏—Ç—å" in text or "—É–¥–∞–ª–∏—Ç—å" in text:
        sheet.delete_row(row_idx)
        msg = (
            f"‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\n"
            f"{rec['–ò–º—è']}, {rec['–£—Å–ª—É–≥–∞']} –Ω–∞ {rec['–î–∞—Ç–∞']} {rec['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    svc = rec["–£—Å–ª—É–≥–∞"]
    date = rec["–î–∞—Ç–∞"]
    slots = []
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
            slots = s.get("—Å–ª–æ—Ç—ã", [])
            break
    if not slots:
        await update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
        return
    taken_slots = get_taken_slots(svc, date)
    free_slots = [t for t in slots if t not in taken_slots or t == rec.get("–í—Ä–µ–º—è")]
    if not free_slots:
        await update.message.reply_text("–í—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç—ã.")
        return
    text_slots = ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç:"]
    for i, t in enumerate(free_slots, 1):
        text_slots.append(f"{i}. {t}")
    await update.message.reply_text("\n".join(text_slots))
    context.user_data["awaiting_slot"] = {"row": row_idx, "slots": free_slots, "record": rec}

async def handle_slot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("awaiting_slot")
    if not state:
        return False
    text = update.message.text.strip()
    if not re.fullmatch(r"\d+", text):
        return False
    idx = int(text) - 1
    slots = state["slots"]
    if idx < 0 or idx >= len(slots):
        return False
    new_time = slots[idx]
    row_idx = state["row"]
    sheet.update_cell(row_idx, 5, new_time)
    rec = state["record"]
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}.")
    msg = (
        f"‚úèÔ∏è –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–º–µ–Ω—è–ª –≤—Ä–µ–º—è:\n"
        f"{rec['–ò–º—è']}, —É—Å–ª—É–≥–∞ {rec['–£—Å–ª—É–≥–∞']}\n"
        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è: {rec['–î–∞—Ç–∞']} {new_time}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    del context.user_data["awaiting_slot"]
    return True

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%d.%m.%Y")
    records = sheet.get_all_records()
    for rec in records:
        if rec.get("–î–∞—Ç–∞") == today:
            chat_id = rec.get("Chat ID")
            svc = rec.get("–£—Å–ª—É–≥–∞")
            time_ = rec.get("–í—Ä–µ–º—è")
            await context.bot.send_message(
                chat_id,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å—å –Ω–∞ *{svc}* –≤ *{time_}*.",
                parse_mode="Markdown"
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = context.user_data

    # --- –ë–ª–æ–∫ –æ—Ç–º–µ–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ---
    if is_cancel_intent(text):
        return await handle_cancel_or_edit(update, context)
    if user_data.get("awaiting_slot"):
        handled = await handle_slot_selection(update, context)
        if handled:
            return

    state = user_data.get("state", "consult")
    form = user_data.get("form", {})

    # --- –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–û–ù–ù–´–ô –†–ï–ñ–ò–ú ---
    if state == "consult":
        # --- 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º: —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? ---
        if is_booking_intent(text):
            service_candidate = match_service(text)
            if service_candidate:
                form["–£—Å–ª—É–≥–∞"] = service_candidate
                user_data["form"] = form
                user_data["state"] = "reg_name"
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                return
            await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n" + build_services_list())
            user_data["state"] = "reg_service"
            user_data["form"] = form
            return

        # --- 2. –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI ---
        services_text = []
        for i, s in enumerate(SERVICES, 1):
            line = f"{i}. {s['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {s['—Ü–µ–Ω–∞']}"
            if '–æ–ø–∏—Å–∞–Ω–∏–µ' in s:
                line += f". {s['–æ–ø–∏—Å–∞–Ω–∏–µ']}"
            services_text.append(line)
        services_prompt = "\n".join(services_text)

        system_prompt = (
            "–¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
            "–û–±—ä—è—Å–Ω—è–π —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º: –ø—Ä–æ—Å—Ç–æ, —Ç–µ–ø–ª–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É. "
            "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–ª–∞—Å—Ç–∏–Ω–∫–∏', '—ç–ª–∞–π–Ω–µ—Ä—ã', '—Ü–µ–Ω—ã', '–ø—Ä–∏–∫—É—Å'), —Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–π —É—Å–ª—É–≥–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (—Ü–µ–Ω–∞, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –ø–æ–∫–∞–∑–∞–Ω–∏—è, –¥–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ —Ç.–¥.). "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—â–∏–π ‚Äî –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Å–ø—Ä–æ—Å–∏, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è. "
            "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—Å–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ ‚Äî –ù–ï –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ù–ï –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –æ –∑–∞–ø–∏—Å–∏. "
            "–ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å —É—Å–ª—É–≥–∏ ‚Äî –æ–±—ä—è—Å–Ω–∏ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∫–∞–∂–¥–æ–π.\n"
            f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∫–ª–∏–Ω–∏–∫–∏:\n{services_prompt}"
        )

        history = user_data.get("history", [])
        history.append({"role": "user", "content": text})
        user_data["history"] = history[-10:]
        messages = [{"role": "system", "content": system_prompt}] + history[-10:]

        try:
            resp = openai.chat.completions.create(model="gpt-4o", messages=messages)
            reply = resp.choices[0].message.content
        except Exception:
            reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å ü§ñ"
        await update.message.reply_text(reply)
        return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–∏—à–µ—Ç "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ...", –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        if is_booking_intent(text):
            service_candidate = match_service(text)
            if service_candidate:
                form["–£—Å–ª—É–≥–∞"] = service_candidate
                user_data["form"] = form
                user_data["state"] = "reg_name"
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
                return
            # –ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞
            await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?\n" + build_services_list())
            user_data["state"] = "reg_service"
            user_data["form"] = form
            return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ."
        )
        return

    # 3. –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ —Å—Ä–∞–∑—É –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
    if state == "reg_service":
        service_candidate = match_service(text)
        if service_candidate:
            form["–£—Å–ª—É–≥–∞"] = service_candidate
            user_data["form"] = form
            user_data["state"] = "reg_name"
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + build_services_list())
        return

    # 4. –ò–º—è
    if state == "reg_name":
        name = extract_name(text)
        if name:
            form["–ò–º—è"] = name
            user_data["form"] = form
            user_data["state"] = "reg_date"
            await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.06.2025 –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞')")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ø –ò–≤–∞–Ω').")
        return

    # 5. –î–∞—Ç–∞
    if state == "reg_date":
        date = extract_date(text)
        if date:
            form["–î–∞—Ç–∞"] = date
            user_data["form"] = form
            user_data["state"] = "reg_time"
            service_obj = get_service_object(form["–£—Å–ª—É–≥–∞"])
            if not service_obj:
                await update.message.reply_text("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∑–∞–Ω–æ–≤–æ.")
                user_data["state"] = "reg_service"
                return
            taken_slots = get_taken_slots(form["–£—Å–ª—É–≥–∞"], date)
            free_slots = [t for t in service_obj.get("—Å–ª–æ—Ç—ã", []) if t not in taken_slots]
            if not free_slots:
                await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
                return
            slot_lines = [f"{i+1}. {slot}" for i, slot in enumerate(free_slots)]
            await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join(slot_lines) + "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è.")
            user_data["free_slots"] = free_slots
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞'.")
        return

    # 6. –í—Ä–µ–º—è
    if state == "reg_time":
        free_slots = user_data.get("free_slots", [])
        value = text.strip()
        chosen_time = None
        if re.fullmatch(r"\d+", value):
            idx = int(value) - 1
            if 0 <= idx < len(free_slots):
                chosen_time = free_slots[idx]
        else:
            for t in free_slots:
                if value in t:
                    chosen_time = t
        if chosen_time:
            form["–í—Ä–µ–º—è"] = chosen_time
            user_data["form"] = form
            user_data["state"] = "reg_phone"
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +77001112233).")
        else:
            slot_lines = [f"{i+1}. {slot}" for i, slot in enumerate(free_slots)]
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + "\n".join(slot_lines))
        return

    # 7. –¢–µ–ª–µ—Ñ–æ–Ω
    if state == "reg_phone":
        phone = extract_phone(text)
        if phone:
            form["–¢–µ–ª–µ—Ñ–æ–Ω"] = phone
            user_data["form"] = form
            # –í—Å—ë —Å–æ–±—Ä–∞–Ω–æ, –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å
            if is_form_complete(form):
                await register_and_notify(form, update, context)
                user_data.clear()
                return
            else:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                user_data.clear()
                return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77001112233.")
        return

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler()

    async def start_scheduler(_: ContextTypes.DEFAULT_TYPE):
        scheduler.add_job(send_reminders, "cron", hour=9, minute=0, args=[app.bot])
        scheduler.start()

    app.post_init = start_scheduler

    RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
    if RENDER_URL.startswith("https://"):
        RENDER_URL = RENDER_URL.replace("https://", "")
    if RENDER_URL.startswith("http://"):
        RENDER_URL = RENDER_URL.replace("http://", "")
    if RENDER_URL.endswith("/"):
        RENDER_URL = RENDER_URL.rstrip("/")
    webhook = f"https://{RENDER_URL}/webhook"

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()


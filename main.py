import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message.text
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",  # –∏–ª–∏ "gpt-4o", –µ—Å–ª–∏ —É —Ç–µ–±—è —Ç–æ—á–Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: —É—Ç–æ—á–Ω–∏ —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."},
                {"role": "user", "content": user_message}
            ]
        )

        reply = completion.choices[0].message.content
        await update.message.reply_text(reply)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {reply}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()

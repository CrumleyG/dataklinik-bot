import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI
from datetime import datetime, timedelta

# 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å .env
load_dotenv()  # —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç —Ç–≤–æ–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π .env

TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN", "").strip()
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY", "").strip()
AIRTABLE_TOKEN      = os.getenv("AIRTABLE_TOKEN", "").strip()
AIRTABLE_BASE_ID    = os.getenv("AIRTABLE_BASE_ID", "").strip()
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME", "").strip()
RENDER_URL          = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT                = int(os.getenv("PORT", "10000").strip())

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN,
            AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_URL]):
    raise RuntimeError(
        "–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ ENV: TELEGRAM_TOKEN, OPENAI_API_KEY, "
        "AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_EXTERNAL_URL"
    )

# 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å HTTP-–∫–ª–∏–µ–Ω—Ç—ã
openai = OpenAI(api_key=OPENAI_API_KEY)
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
print("‚ÑπÔ∏è Using Airtable URL:", AIRTABLE_URL)

AIRTABLE_HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_TOKEN}",
    "Content-Type": "application/json",
}

# 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
def extract_fields(text: str):
    m_name = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s*([–ê-–Ø–Å][–∞-—è—ë]+)', text, re.IGNORECASE)
    m_serv = re.search(r'(?:–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É|–Ω–∞|—Ö–æ—á—É)\s+([–∞-—è—ë\s]+?)(?=\s*(?:–≤|–∑–∞–≤—Ç—Ä–∞|\d|\.)|$)', text, re.IGNORECASE)
    m_dt   = re.search(
        r'(?:(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})|(?:–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞))\s*–≤\s*(\d{1,2}:\d{2})',
        text, re.IGNORECASE
    )
    name    = m_name.group(1).capitalize() if m_name else None
    service = m_serv.group(1).strip().capitalize() if m_serv else None

    date_raw = None
    time_raw = None
    if m_dt:
        if m_dt.group(1):
            date_raw = m_dt.group(1)
        else:
            days = 2 if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in m_dt.group(0).lower() else 1
            date_raw = (datetime.now() + timedelta(days=days)).strftime("%d.%m.%Y")
        time_raw = m_dt.group(2)

    return name, service, date_raw, time_raw

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-30:]

    # –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏
    form = user_data.get("form", {})
    n, s, d, t = extract_fields(text)
    if n: form["name"]    = n
    if s: form["service"] = s
    if d: form["date"]    = d
    if t: form["time"]    = t
    user_data["form"] = form

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è GPT
    messages = [
        {
            "role":"system",
            "content":(
                "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
                "–ì–æ–≤–æ—Ä–∏—Ç–µ –æ—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –ª–∏—Ü–∞, –≤–µ–∂–ª–∏–≤–æ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: "
                "—É–∑–Ω–∞—Ç—å –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —Å–ø—Ä–æ—Å–∏—Ç–µ."
            )
        }
    ] + history[-10:]

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        resp  = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = resp.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI error:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.")
        return

    # –û—Ç–≤–µ—Ç –±–æ—Ç–∞
    await update.message.reply_text(reply)
    history.append({"role":"assistant","content":reply})
    user_data["history"] = history[-30:]

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–∞—è ‚Äî –ø–∏—à–µ–º –≤ Airtable
    print("üîç Current form:", form)
    if all(k in form for k in ("name","service","date","time")):
        dt_full = f"{form['date']} {form['time']}"
        payload = {
            "fields": {
                "–ò–º—è":            form["name"],
                "–§–∞–º–∏–ª–∏—è":       update.effective_user.last_name or "",
                "Username":      update.effective_user.username or "",
                "Chat ID":       update.effective_user.id,
                "–£—Å–ª—É–≥–∞":        form["service"],
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è":  dt_full,
                "–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏":   datetime.now().isoformat()
            }
        }
        print("‚ñ∂Ô∏è POST Airtable:", AIRTABLE_URL, payload)
        res = requests.post(AIRTABLE_URL, headers=AIRTABLE_HEADERS, json=payload)
        print("üì§ Airtable response:", res.status_code, res.text)
        if res.status_code in (200,201):
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞ –≤–∞—Å, {form['name']}, –Ω–∞ {form['service']} "
                f"–≤ {dt_full}. –°–ø–∞—Å–∏–±–æ!"
            )
            user_data.pop("form")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.")
    else:
        print("‚ö†Ô∏è –ñ–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.")

# 5. –ó–∞–ø—É—Å–∫ Webhook
def main():
    print("üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook‚Ä¶")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    external   = RENDER_URL if RENDER_URL.startswith("http") else "https://" + RENDER_URL
    webhook_url = f"{external}/webhook"
    print("üîó Webhook:", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()

import os
import re
import json
import gspread
import dateparser
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
GROUP_CHAT_ID = -1002529967465

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI ===
openai = OpenAI(api_key=OPENAI_API_KEY)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets ===
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ ===
with open("services.json", "r", encoding="utf-8") as f:
    SERVICE_DICT = json.load(f)

# === –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–æ–ª–µ–π ===
def extract_fields(text: str) -> dict:
    result = {}
    lower = text.lower()
    print("üîç –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", lower)

    # –ò–º—è
    m_name = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)', text)
    if m_name:
        result['–ò–º—è'] = m_name.group(1)
        print("‚úÖ –ò–º—è:", result['–ò–º—è'])

    # –¢–µ–ª–µ—Ñ–æ–Ω
    m_phone = re.search(r'(\+?\d{7,15})', text)
    if m_phone:
        result['–¢–µ–ª–µ—Ñ–æ–Ω'] = m_phone.group(1)
        print("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω:", result['–¢–µ–ª–µ—Ñ–æ–Ω'])

    # –í—Ä–µ–º—è
    m_time = re.search(r'(\d{1,2}[:\.-]\d{2})', text)
    if m_time:
        result['–í—Ä–µ–º—è'] = m_time.group(1).replace('.', ':').replace('-', ':')
        print("‚úÖ –í—Ä–µ–º—è:", result['–í—Ä–µ–º—è'])

    # –î–∞—Ç–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–ª—è —Ç–µ—Å—Ç–∞
    parsed_date = dateparser.parse(
        text,
        settings={
            'TIMEZONE': 'Asia/Almaty',
            'TO_TIMEZONE': 'Asia/Almaty',
            'RETURN_AS_TIMEZONE_AWARE': False,
            'RELATIVE_BASE': datetime(2025, 5, 21)
        }
    )
    if parsed_date:
        result['–î–∞—Ç–∞'] = parsed_date.strftime("%d.%m.%Y")
        print("‚úÖ –î–∞—Ç–∞:", result['–î–∞—Ç–∞'])

    # –£—Å–ª—É–≥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    print("üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏...")
    for key, val in SERVICE_DICT.items():
        for syn in val['–∫–ª—é—á–∏']:
            if syn in lower:
                result['–£—Å–ª—É–≥–∞'] = f"{val['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {val['—Ü–µ–Ω–∞']}"
                print(f"üõ† –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ '{syn}' => –£—Å–ª—É–≥–∞: {result['–£—Å–ª—É–≥–∞']}")
                break
        if '–£—Å–ª—É–≥–∞' in result:
            break
    if '–£—Å–ª—É–≥–∞' not in result:
        print("‚ö†Ô∏è –£—Å–ª—É–≥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

    return result

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID ===
async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"Chat ID: `{update.message.chat_id}`", parse_mode='Markdown'
    )

# === –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Ä–∞—á–µ–π ===
def record_submission(form: dict, context):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [
        form['–ò–º—è'], form['–¢–µ–ª–µ—Ñ–æ–Ω'], form['–£—Å–ª—É–≥–∞'],
        form['–î–∞—Ç–∞'], form['–í—Ä–µ–º—è'], now
    ]
    print("üìã –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets:", row)
    try:
        sheet.append_row(row)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)
    msg = (
        "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
        f"–ò–º—è: {row[0]}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {row[1]}\n"
        f"–£—Å–ª—É–≥–∞: {row[2]}\n"
        f"–î–∞—Ç–∞: {row[3]} –≤ {row[4]}"
    )
    context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è GPT
    history = user_data.get('history', [])
    history.append({'role': 'user', 'content': text})
    user_data['history'] = history[-20:]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
    form = user_data.get('form', {})
    extracted = extract_fields(text)
    form.update({k: v for k, v in extracted.items() if v})
    user_data['form'] = form

    print("üîé –ò—Ç–æ–≥ —Ñ–æ—Ä–º—ã:", form)

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –µ—Å—Ç—å ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å –∏ –≤—ã–π—Ç–∏
    needed = ('–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—Å–ª—É–≥–∞', '–î–∞—Ç–∞', '–í—Ä–µ–º—è')
    if all(form.get(k) for k in needed):
        record_submission(form, context)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞ –≤–∞—Å, {form['–ò–º—è']}! –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ üòä"
        )
        user_data['form'] = {}
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É GPT –æ—Ç–≤–µ—Ç
    sys_prompt = (
        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
        "–û—Ç–≤–µ—á–∞–π –ø–æ —É—Å–ª—É–≥–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞, —É—Ç–æ—á–Ω—è–π –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É, –≤—Ä–µ–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω."
    )
    msgs = [{'role': 'system', 'content': sys_prompt}] + history[-10:]
    try:
        resp = openai.chat.completions.create(model='gpt-4o', messages=msgs)
        reply = resp.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ OpenAI")

    await update.message.reply_text(reply)
    history.append({'role': 'assistant', 'content': reply})
    user_data['history'] = history[-20:]

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler('id', show_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    url = RENDER_URL if RENDER_URL.startswith('http') else f"https://{RENDER_URL}"
    webhook = f"{url}/webhook"
    app.run_webhook(
        listen='0.0.0.0', port=PORT,
        url_path='webhook', webhook_url=webhook,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()

import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from openai import OpenAI
from datetime import datetime

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AIRTABLE_TOKEN = os.getenv("AIRTABLE_TOKEN")
AIRTABLE_BASE_ID = os.getenv("AIRTABLE_BASE_ID")
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.getenv("PORT", 10000))

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_URL]):
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ ENV: TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_EXTERNAL_URL")

client = OpenAI(api_key=OPENAI_API_KEY)

AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
AIRTABLE_HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_TOKEN}",
    "Content-Type": "application/json"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
def extract_fields(text):
    name_match = re.search(r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|—è|–∏–º—è)\s*([–ê-–Ø–∞-—è–Å—ë]+)", text, re.IGNORECASE)
    service_match = re.search(r"(?:–Ω–∞|—Ö–æ—á—É|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞)\s+([–∞-—è–ê-–Ø—ë–Å\s]+?)(?:\s+–Ω–∞\s+|\s+–≤\s+|\s+|$)", text)
    datetime_match = re.search(r"(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4}).*?(?:–≤|–≤\s)?\s*(\d{1,2}:\d{2})", text)

    name = name_match.group(1) if name_match else None
    service = service_match.group(1).strip() if service_match else None
    date_str = datetime_match.group(1) if datetime_match else None
    time_str = datetime_match.group(2) if datetime_match else None

    return name, service, date_str, time_str

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_data = context.user_data

    history = user_data.get("history", [])
    history.append({"role": "user", "content": user_input})

    messages = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –≤–µ–∂–ª–∏–≤–æ. "
                "–ó–∞–ø–∏—Å—ã–≤–∞–π –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É—Å–ª—É–≥—É. –¢–µ–±–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."
                " –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. –ò–∑–≤–ª–µ–∫–∞–π –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –∑–∞–ø–∏—Å—å."
            )
        }
    ] + history[-10:]

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": reply})
        user_data["history"] = history[-30:]

        await update.message.reply_text(reply)

        name, service, date_str, time_str = extract_fields(user_input + reply)

        if all([name, service, date_str, time_str]):
            dt_full = f"{date_str} {time_str}"
            data = {
                "fields": {
                    "–ò–º—è": name,
                    "–§–∞–º–∏–ª–∏—è": update.effective_user.last_name or "",
                    "Username": update.effective_user.username or "",
                    "Chat ID": update.effective_user.id,
                    "–£—Å–ª—É–≥–∞": service,
                    "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏": dt_full,
                    "–°–æ–æ–±—â–µ–Ω–∏–µ": user_input,
                    "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞—è–≤–∫–∏": datetime.now().isoformat()
                }
            }
            requests.post(AIRTABLE_URL, headers=AIRTABLE_HEADERS, json=data)
            await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {name}, {service}, {dt_full}. –î–æ –≤—Å—Ç—Ä–µ—á–∏!")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook‚Ä¶")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    if not RENDER_URL.startswith("http"):
        external = "https://" + RENDER_URL
    else:
        external = RENDER_URL

    url_path = "webhook"
    webhook_url = f"{external}/{url_path}"
    print("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook:", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()


import os
import re
import json
import gspread
import dateparser
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, filters
)
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
GROUP_CHAT_ID  = int(os.getenv("GROUP_CHAT_ID", "-1002529967465"))

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI ===
openai = OpenAI(api_key=OPENAI_API_KEY)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets —á–µ—Ä–µ–∑ Secret File ===
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ ===
with open("services.json", "r", encoding="utf-8") as f:
    SERVICE_DICT = json.load(f)

# === –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ ===
def extract_fields(text):
    result = {}
    lower = text.lower()

    # –ò–º—è
    m = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)|^([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\b', text)
    if m: 
       result["–ò–º—è"] = m.group(1) or m.group(2)


    # –¢–µ–ª–µ—Ñ–æ–Ω
    m = re.search(r'(\+?\d{7,15})', text)
    if m:
        result["–¢–µ–ª–µ—Ñ–æ–Ω"] = m.group(1)

    # –í—Ä–µ–º—è
    m = re.search(r'(\d{1,2}[:\.-]\d{2})', text)
    if m:
        result["–í—Ä–µ–º—è"] = m.group(1).replace(".", ":").replace("-", ":")

    # –î–∞—Ç–∞ —Å –±–∞–∑–æ–π 21.05.2025
    dt = dateparser.parse(
        text,
        settings={
            "TIMEZONE": "Asia/Almaty",
            "TO_TIMEZONE": "Asia/Almaty",
            "RETURN_AS_TIMEZONE_AWARE": False,
            "RELATIVE_BASE": datetime(2025, 5, 21)
        }
    )
    if dt:
        result["–î–∞—Ç–∞"] = dt.strftime("%d.%m.%Y")

    # –£—Å–ª—É–≥–∞ –ø–æ –∫–ª—é—á–∞–º
    for srv_key, srv in SERVICE_DICT.items():
        for synonym in srv["–∫–ª—é—á–∏"]:
            if synonym in lower:
                result["–£—Å–ª—É–≥–∞"] = f"{srv['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {srv['—Ü–µ–Ω–∞']}"
                return result  # –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è

    return result

# === –ö–æ–º–∞–Ω–¥–∞ /id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Chat ID: `{update.message.chat_id}`", parse_mode='Markdown')

# === –ó–∞–ø–∏—Å—å –≤ Google Sheets –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É ===
def record_submission(form, context):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
    sheet.append_row(row)
    msg = (
        "üÜï *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å*\n"
        f"üë§ {form['–ò–º—è']}\n"
        f"üìû {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
        f"ü¶∑ {form['–£—Å–ª—É–≥–∞']}\n"
        f"üìÖ {form['–î–∞—Ç–∞']} –≤ {form['–í—Ä–µ–º—è']}"
    )
    context.bot.send_message(chat_id=GROUP_CHAT_ID, text=msg, parse_mode='Markdown')

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    hist = user_data.get("history", [])
    hist.append({"role": "user", "content": text})
    user_data["history"] = hist[-20:]

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è
    form = user_data.get("form", {})
    found = extract_fields(text)
    form.update(found)
    user_data["form"] = form

    print("üîé –¢–µ–∫—É—â–∏–π form:", form)

    # –ï—Å–ª–∏ –≤—Å–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    needed = ["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"]
    if all(form.get(k) for k in needed):
        record_submission(form, context)
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞ –≤–∞—Å, {form['–ò–º—è']}! –î–æ –≤—Å—Ç—Ä–µ—á–∏ üòä"
        )
        user_data["form"] = {}
        return

    # –ò–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —á–µ—Ä–µ–∑ GPT
    sys = {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
            "–£—Ç–æ—á–Ω—è–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: –∏–º—è, —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞, –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω."
        )
    }
    msgs = [sys] + hist[-10:]
    try:
        resp = openai.chat.completions.create(model="gpt-4o", messages=msgs)
        reply = resp.choices[0].message.content
    except Exception as e:
        print("OpenAI Error:", e)
        return await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.")

    await update.message.reply_text(reply)
    hist.append({"role": "assistant", "content": reply})
    user_data["history"] = hist[-20:]

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("id", show_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    url = RENDER_URL if RENDER_URL.startswith("http") else f"https://{RENDER_URL}"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=f"{url}/webhook",
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()

import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI
from datetime import datetime, timedelta

# ‚Äî‚Äî‚Äî 1. –ó–∞–≥—Ä—É–∑–∫–∞ ENV ‚Äî‚Äî‚Äî
load_dotenv()
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY")
AIRTABLE_TOKEN      = os.getenv("AIRTABLE_TOKEN")
AIRTABLE_BASE_ID    = os.getenv("AIRTABLE_BASE_ID")
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ –µ–µ –∏–º—è
RENDER_URL          = os.getenv("RENDER_EXTERNAL_URL")
PORT                = int(os.getenv("PORT", 10000))

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_URL]):
    raise RuntimeError(
        "–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ ENV: TELEGRAM_TOKEN, OPENAI_API_KEY, "
        "AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_EXTERNAL_URL"
    )

# ‚Äî‚Äî‚Äî 2. –ö–ª–∏–µ–Ω—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚Äî‚Äî‚Äî
openai = OpenAI(api_key=OPENAI_API_KEY)
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
AIRTABLE_HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_TOKEN}",
    "Content-Type": "application/json",
}

# ‚Äî‚Äî‚Äî 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ—Ä–≥–∏–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî‚Äî‚Äî
def extract_fields(text: str):
    # –ò–º—è: ¬´–º–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω¬ª, ¬´–∑–æ–≤—É—Ç –ú–∞—Ä–∏—è¬ª, ¬´—è –û–ª—å–≥–∞¬ª
    m_name = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s*([–ê-–Ø–Å][–∞-—è—ë]+)', text, re.IGNORECASE)
    # –£—Å–ª—É–≥–∞: ¬´—Ö–æ—á—É —á–∏—Å—Ç–∫—É –∑—É–±–æ–≤¬ª, ¬´–Ω–∞ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ¬ª
    m_serv = re.search(r'(?:—Ö–æ—á—É|–Ω–∞)\s+([–ê-–Ø–∞-—è—ë–Å\s]+?)(?=\s*(?:–≤|–∑–∞–≤—Ç—Ä–∞|\d|\.)|$)', text, re.IGNORECASE)
    # –î–∞—Ç–∞+–≤—Ä–µ–º—è: ¬´15.05.2025 –≤ 14:00¬ª, ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 9:30¬ª, ¬´–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 11:00¬ª
    m_dt = re.search(
        r'(?:(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})|(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞))\s*(?:–≤\s*)?(\d{1,2}:\d{2})',
        text, re.IGNORECASE
    )

    name    = m_name.group(1).capitalize() if m_name else None
    service = m_serv.group(1).strip()      if m_serv else None

    date_raw = None
    time_raw = None
    if m_dt:
        if m_dt.group(1):
            date_raw = m_dt.group(1)
        else:
            # ¬´–∑–∞–≤—Ç—Ä–∞¬ª –∏–ª–∏ ¬´–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞¬ª
            days = 2 if m_dt.group(2).lower() == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" else 1
            date_raw = (datetime.now() + timedelta(days=days)).strftime("%d.%m.%Y")
        time_raw = m_dt.group(4)

    return name, service, date_raw, time_raw

# ‚Äî‚Äî‚Äî 4. –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî‚Äî‚Äî
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # 4.1. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-30:]

    # 4.2. –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    form = user_data.get("form", {})
    n, s, d, t = extract_fields(text)
    if n: form["name"]    = n
    if s: form["service"] = s
    if d: form["date"]    = d
    if t: form["time"]    = t
    user_data["form"] = form

    # 4.3. –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è GPT
    messages = [
        {
            "role": "system",
            "content": (
                "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –ì–æ–≤–æ—Ä–∏—Ç–µ –æ—Ç –∂–µ–Ω—Å–∫–æ–≥–æ –ª–∏—Ü–∞, "
                "–≤–µ–∂–ª–∏–≤–æ –∏ –ø—Ä–∏—è—Ç–Ω–æ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É—Å–ª—É–≥—É: "
                "—É–∑–Ω–∞—Ç—å –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —Å–ø—Ä–æ—Å–∏—Ç–µ."
            )
        }
    ] + history[-10:]

    # 4.4. –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        resp  = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = resp.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI error:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI.")
        return

    # 4.5. –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-30:]

    # 4.6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –∏ –∑–∞–ø–∏—Å—å –≤ Airtable
    form = user_data["form"]
    print("üîç –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞:", form)
    if all(k in form for k in ("name", "service", "date", "time")):
        dt_full = f"{form['date']} {form['time']}"
        payload = {
            "fields": {
                "–ò–º—è": form["name"],
                "–§–∞–º–∏–ª–∏—è": update.effective_user.last_name or "",
                "Username": update.effective_user.username or "",
                "Chat ID": update.effective_user.id,
                "–£—Å–ª—É–≥–∞": form["service"],
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏": dt_full,
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞—è–≤–∫–∏": datetime.now().isoformat()
            }
        }
        print("‚ñ∂Ô∏è POST Airtable:", AIRTABLE_URL, payload)
        res = requests.post(AIRTABLE_URL, headers=AIRTABLE_HEADERS, json=payload)
        print("üì§ Airtable response:", res.status_code, res.text)

        if res.status_code in (200, 201):
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞ –≤–∞—Å, {form['name']}, –Ω–∞ {form['service']} –≤ {dt_full}. "
                "–°–ø–∞—Å–∏–±–æ! –î–æ –≤—Å—Ç—Ä–µ—á–∏."
            )
            user_data.pop("form")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥.")
    else:
        # –ë–æ—Ç —Å–∞–º —É—Ç–æ—á–Ω–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥.")

# ‚Äî‚Äî‚Äî 5. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook ‚Äî‚Äî‚Äî
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook‚Ä¶")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    external = RENDER_URL if RENDER_URL.startswith("http") else "https://" + RENDER_URL
    webhook_url = f"{external}/webhook"
    print("üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

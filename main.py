import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI
from datetime import datetime, timedelta

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN       = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY       = os.getenv("OPENAI_API_KEY")
AIRTABLE_TOKEN       = os.getenv("AIRTABLE_TOKEN")
AIRTABLE_BASE_ID     = os.getenv("AIRTABLE_BASE_ID")
AIRTABLE_TABLE_NAME  = os.getenv("AIRTABLE_TABLE_NAME")
RENDER_URL           = os.getenv("RENDER_EXTERNAL_URL")
PORT                 = int(os.getenv("PORT", 10000))

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å—ë –ø–µ—Ä–µ–¥–∞–Ω–æ
if not all([
    TELEGRAM_TOKEN,
    OPENAI_API_KEY,
    AIRTABLE_TOKEN,
    AIRTABLE_BASE_ID,
    AIRTABLE_TABLE_NAME,
    RENDER_URL,
]):
    raise RuntimeError(
        "–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ ENV:\n"
        "TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN,\n"
        "AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_EXTERNAL_URL"
    )

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
openai = OpenAI(api_key=OPENAI_API_KEY)
AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
AIRTABLE_HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_TOKEN}",
    "Content-Type": "application/json"
}

# 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_fields(text: str):
    # –∏–º—è: ¬´–º–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω¬ª, ¬´—è –ò–≤–∞–Ω¬ª, ¬´–ò–≤–∞–Ω¬ª
    m_name = re.search(r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç|—è)\s*([–ê-–Ø–Å][–∞-—è—ë]+)', text, re.IGNORECASE)
    # —É—Å–ª—É–≥–∞: ¬´–Ω–∞ —á–∏—Å—Ç–∫—É –∑—É–±–æ–≤¬ª, ¬´—Ö–æ—á—É —á–∏—Å—Ç–∫—É –∑—É–±–æ–≤¬ª
    m_serv = re.search(r'(?:–Ω–∞|—Ö–æ—á—É)\s+([–∞-—è—ë\s]+?)(?:\s+–≤\s+\d|\s+–∑–∞–≤—Ç—Ä–∞|\.$)', text, re.IGNORECASE)
    # –¥–∞—Ç–∞+–≤—Ä–µ–º—è: ¬´15.05.2025 –≤ 14:00¬ª, ¬´–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ 9:30¬ª
    m_dt   = re.search(
        r'(?:(\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})|(?:–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞))'
        r'(?:\s*–≤\s*)(\d{1,2}:\d{2})',
        text, re.IGNORECASE
    )
    name    = m_name.group(1).capitalize() if m_name else None
    service = m_serv.group(1).strip()      if m_serv else None
    date    = m_dt.group(1)               if m_dt and m_dt.group(1) else None
    time    = m_dt.group(2)               if m_dt else None
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ¬´–∑–∞–≤—Ç—Ä–∞¬ª/¬´–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞¬ª
    if not date and m_dt and "–∑–∞–≤—Ç—Ä–∞" in m_dt.group(0).lower():
        days = 1 if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" not in m_dt.group(0).lower() else 2
        date = (datetime.now() + timedelta(days=days)).strftime("%d.%m.%Y")
    return name, service, date, time

# 5. –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": user_text})

    messages = [
        {
            "role": "system",
            "content": (
                "–í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏ (–∂–µ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å). "
                "–í–µ–¥–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –≤–µ–∂–ª–∏–≤–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ "
                "–Ω–∞ —É—Å–ª—É–≥—É. –£–∑–Ω–∞–π—Ç–µ –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å."
            )
        }
    ] + history[-10:]

    # –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        resp  = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = resp.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI error:", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenAI.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    context.user_data["history"] = history[-30:]

    # –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è
    name, service, date_str, time_str = extract_fields(user_text + " " + reply)
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ: name={name}, service={service}, date={date_str}, time={time_str}")

    # –µ—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å ‚Äî –ø–∏—à–µ–º –≤ Airtable
    if all([name, service, date_str, time_str]):
        dt_full = f"{date_str} {time_str}"
        payload = {
            "fields": {
                "–ò–º—è": name,
                "–§–∞–º–∏–ª–∏—è": update.effective_user.last_name or "",
                "Username": update.effective_user.username or "",
                "Chat ID": update.effective_user.id,
                "–£—Å–ª—É–≥–∞": service,
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏": dt_full,
                "–°–æ–æ–±—â–µ–Ω–∏–µ": user_text,
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞—è–≤–∫–∏": datetime.now().isoformat()
            }
        }
        print("‚ñ∂Ô∏è POST URL:", AIRTABLE_URL)
        print("‚ñ∂Ô∏è PAYLOAD:", payload)
        try:
            res = requests.post(AIRTABLE_URL, headers=AIRTABLE_HEADERS, json=payload)
            print("üì§ Airtable status:", res.status_code, res.text)
            if res.status_code in (200, 201):
                await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∞: {name}, {service}, {dt_full}.")
            else:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        except Exception as e:
            print("‚ùå Airtable request error:", e)
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Airtable.")

# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞‚Ä¶")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    external = RENDER_URL if RENDER_URL.startswith("http") else "https://" + RENDER_URL
    webhook_url = f"{external}/webhook"
    print("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook:", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

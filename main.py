import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# OpenAI
openai = OpenAI(api_key=OPENAI_API_KEY)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞ –∏–∑ Render Secret File
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥
with open("services.json", "r", encoding="utf-8") as f:
    SERVICE_DICT = json.load(f)

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def extract_fields(text):
    result = {}
    lower = text.lower()

    name = re.search(r'(–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)', text)
    if name:
        result["–ò–º—è"] = name.group(2)

    phone = re.search(r'(\+?\d{7,15})', text)
    if phone:
        result["–¢–µ–ª–µ—Ñ–æ–Ω"] = phone.group(1)

    time_ = re.search(r'\b(\d{1,2}:\d{2})\b', text)
    if time_:
        result["–í—Ä–µ–º—è"] = time_.group(1)

    date_match = re.search(r'(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})', lower)
    if date_match:
        raw = date_match.group(1)
        base = datetime(2025, 5, 21)  # –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞
        if "—Å–µ–≥–æ–¥–Ω—è" in raw:
            result["–î–∞—Ç–∞"] = base.strftime("%d.%m.%Y")
        elif "–∑–∞–≤—Ç—Ä–∞" in raw:
            result["–î–∞—Ç–∞"] = (base + timedelta(days=1)).strftime("%d.%m.%Y")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in raw:
            result["–î–∞—Ç–∞"] = (base + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            result["–î–∞—Ç–∞"] = raw.replace("-", ".").replace("/", ".")

    for key, value in SERVICE_DICT.items():
        for synonym in value["–∫–ª—é—á–∏"]:
            if synonym in lower:
                result["–£—Å–ª—É–≥–∞"] = value["–Ω–∞–∑–≤–∞–Ω–∏–µ"] + " ‚Äî " + value["—Ü–µ–Ω–∞"]
                break

    return result

# –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    messages = [{
        "role": "system",
        "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —É—Å–ª—É–≥–∞–º –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —É—Å–ª—É–≥–∏. –£—Ç–æ—á–Ω–∏, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É, –≤—Ä–µ–º—è, –Ω–æ–º–µ—Ä."
    }] + history[-10:]

    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI üòî")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    if all(form.get(k) for k in required):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}

# –ó–∞–ø—É—Å–∫
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

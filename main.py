import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler, filters
)
from openai import OpenAI
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get("PORT", 10000))
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")

client = OpenAI(api_key=OPENAI_API_KEY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = context.application.user_data.setdefault(user_id, {"history": []})

    user_message = update.message.text
    user_data["history"].append({"role": "user", "content": user_message})

    messages = [
        {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: —É—Ç–æ—á–Ω–∏ —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–µ–Ω."}
    ] + user_data["history"]

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        reply = response.choices[0].message.content
        user_data["history"].append({"role": "assistant", "content": reply})
        user_data["history"] = user_data["history"][-10:]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π

        await update.message.reply_text(reply)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –Ω–∞ Render.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook (aiohttp)...")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_path = "/webhook"
    webhook_url = f"{RENDER_URL}{webhook_path}"
    await app.bot.set_webhook(webhook_url)
    print(f"üîó –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {webhook_url}")

    # aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    aio_app = web.Application()
    aio_app.router.add_post(webhook_path, app.webhook_handler())

    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–æ–±—â–µ–Ω–∏–π")

# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
DOCTORS_GROUP_ID = -1002529967465  # —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞

# --- OpenAI ---
openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Google Sheets ---
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

# --- –£—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–∫–∏ ---
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES_DICT = json.load(f)
    SERVICES = list(SERVICES_DICT.values())

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —à–∞–±–ª–æ–Ω—ã ---
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "—Ö–æ—á—É –Ω–∞", "–Ω–∞ –ø—Ä–∏–µ–º", "–Ω–∞ –ø—Ä–∏—ë–º", "appointment", "–ø—Ä–∏—ë–º",
    "–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "—Ö–æ—á—É –ø–æ–ø–∞—Å—Ç—å", "–º–æ–≥—É –ª–∏ —è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
    "—Ö–æ—Ç–µ–ª –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è", "–∑–∞–ø–∏—à–∏—Å—å", "–≥–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONSULT_WORDS = [
    "—É—Å–ª—É–≥", "–ø—Ä–∞–π—Å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω—ã", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "–ø–µ—Ä–µ—á–µ–Ω—å", "—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ", "–ø—Ä–∞–π—Å–ª–∏—Å—Ç"
]

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_consult_intent(text):
    q = text.lower()
    return any(w in q for w in CONSULT_WORDS)

def match_service(text):
    q = text.lower()
    # –ß–∏—Å–ª–æ–≤–æ–π –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1" –∏–ª–∏ "2")
    m = re.match(r"^\s*(\d+)\s*$", text)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(SERVICES):
            return SERVICES[idx]['–Ω–∞–∑–≤–∞–Ω–∏–µ']
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–ª—é—á–∞–º
    for s in SERVICES:
        if s['–Ω–∞–∑–≤–∞–Ω–∏–µ'].lower() in q:
            return s['–Ω–∞–∑–≤–∞–Ω–∏–µ']
        for kw in s.get('–∫–ª—é—á–∏', []):
            if kw.lower() in q:
                return s['–Ω–∞–∑–≤–∞–Ω–∏–µ']
    return None

def build_services_list():
    result = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏:*"]
    for i, s in enumerate(SERVICES, 1):
        result.append(f"{i}. *{s['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ({s['—Ü–µ–Ω–∞']})")
    return "\n".join(result)

def extract_fields(text):
    # –ò–º—è
    name = None
    m = re.search(r"(?:–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)", text)
    if m:
        candidate = m.group(1)
        if candidate.lower() not in ['–Ω–∞', '–º–Ω–µ', '—è', '–º–µ–Ω—è', '–æ—Å–º–æ—Ç—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è']:
            name = candidate
    # –ò–º—è, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏ (‚Äú–ò–±—Ä–∞–≥–∏–º‚Äù, ‚Äú–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ 877‚Ä¶‚Äù)
    if not name:
        parts = text.replace(",", " ").split()
        first_word = parts[0].capitalize() if parts else ""
        # –ù–µ –±–µ—Ä—ë–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —É—Å–ª—É–≥–∏ –∫–∞–∫ –∏–º—è!
        service_words = ['–Ω–∞', '–æ—Å–º–æ—Ç—Ä', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–º–Ω–µ', '—è', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É', '–Ω–æ–º–µ—Ä']
        if (first_word and
            first_word.lower() not in service_words and
            not first_word.lower().startswith("–Ω–∞")):
            name = first_word
    # (–¥–∞–ª–µ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ...)
    # –£—Å–ª—É–≥–∞
    service = match_service(text)
    # –î–∞—Ç–∞
    date = None
    date_match = re.search(r'(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})', text)
    if date_match:
        d = date_match.group(1)
        if "–∑–∞–≤—Ç—Ä–∞" in d:
            date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in d:
            date = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            date = d
    # –í—Ä–µ–º—è
    time_ = None
    time_match = re.search(r'\b(\d{1,2}[:.]\d{2})\b', text)
    if time_match:
        time_ = time_match.group(1).replace('.', ':')
    # –¢–µ–ª–µ—Ñ–æ–Ω
    phone = None
    phone_match = re.search(r'(\+?\d{7,15})', text)
    if phone_match:
        phone = phone_match.group(1)
    return {
        "–ò–º—è": name,
        "–£—Å–ª—É–≥–∞": service,
        "–î–∞—Ç–∞": date,
        "–í—Ä–µ–º—è": time_,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
    }

def is_form_complete(form):
    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    return all(form.get(k) for k in required)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # 1. –°–ø—Ä–∞–≤–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º ‚Äî –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø–∏—Å–∏
    if is_consult_intent(text):
        await update.message.reply_text(build_services_list(), parse_mode="Markdown")
        return

    # 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    # 3. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –µ—Å—Ç—å (–¥–æ AI!)
    if is_form_complete(form):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        doctors_msg = (
            f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!*\n"
            f"–ò–º—è: {form['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(
            chat_id=DOCTORS_GROUP_ID,
            text=doctors_msg,
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}
        return

    # 4. –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π ‚Äî AI –¥–æ–∫–∞–ø—ã–≤–∞–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    ai_prompt = (
        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏, –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º. "
        "–í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á–µ–≥–æ –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç (–∏–º—è, —É—Å–ª—É–≥–∞, –¥–∞—Ç–∞, –≤—Ä–µ–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω). "
        "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å–∏—Ç —É—Å–ª—É–≥–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥ (–Ω–∏ –æ–¥–Ω–æ–≥–æ —á—É–∂–æ–≥–æ —Å–ª–æ–≤–∞!), –≤–æ—Ç –æ–Ω–∏:\n"
        + build_services_list() +
        "\n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏, –≤—Å–µ–≥–¥–∞ —É—Ç–æ—á–Ω—è–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π."
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥—É–±–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )

    messages = [{"role": "system", "content": ai_prompt}] + history[-10:]

    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI üòî")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

    # 5. –ü–æ—Å–ª–µ AI –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –≤–¥—Ä—É–≥ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    form = user_data.get("form", {})
    if is_form_complete(form):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        doctors_msg = (
            f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!*\n"
            f"–ò–º—è: {form['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(
            chat_id=DOCTORS_GROUP_ID,
            text=doctors_msg,
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}

def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

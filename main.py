import os
import re
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)
from openai import OpenAI
from datetime import datetime

load_dotenv()

TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY")
AIRTABLE_TOKEN      = os.getenv("AIRTABLE_TOKEN")
AIRTABLE_BASE_ID    = os.getenv("AIRTABLE_BASE_ID")
AIRTABLE_TABLE_NAME = os.getenv("AIRTABLE_TABLE_NAME")  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å tblKVUJdq68uq0cpN
RENDER_URL          = os.getenv("RENDER_EXTERNAL_URL")
PORT                = int(os.getenv("PORT", 10000))

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN, AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_URL]):
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤—Å–µ ENV: TELEGRAM_TOKEN, OPENAI_API_KEY, AIRTABLE_TOKEN, "
                       "AIRTABLE_BASE_ID, AIRTABLE_TABLE_NAME, RENDER_EXTERNAL_URL")

openai = OpenAI(api_key=OPENAI_API_KEY)

AIRTABLE_URL = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
AIRTABLE_HEADERS = {
    "Authorization": f"Bearer {AIRTABLE_TOKEN}",
    "Content-Type": "application/json",
}

def extract_fields(text: str):
    dt = re.search(r"(\d{1,2}[./-]\d{1,2}[./-]\d{2,4})", text)
    tm = re.search(r"(\d{1,2}:\d{2})", text)
    svc = re.search(
        r"(?:–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞|—Ö–æ—á—É –Ω–∞|–Ω–∞)\s+(.+?)(?=\s+(?:–≤|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)|$)",
        text, re.IGNORECASE,
    )
    nm = re.search(r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç\s*|—è\s*)([–ê-–Ø–Å][–∞-—è—ë]+)", text)
    return (
        nm.group(1).strip() if nm else None,
        svc.group(1).strip() if svc else None,
        dt.group(1).strip() if dt else None,
        tm.group(1).strip() if tm else None,
    )

async def handle_message(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_txt = update.message.text
    history = ctx.user_data.get("history", [])
    history.append({"role": "user", "content": user_txt})
    ctx.user_data["history"] = history[-10:]

    prompt = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
                "–í–µ–∂–ª–∏–≤–æ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥, –∏–∑–≤–ª–µ–∫–∞–π –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ "
                "–∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –∑–∞–ø–∏—Å—å."
            ),
        }
    ] + history

    resp = openai.chat.completions.create(
        model="gpt-4o",
        messages=prompt,
    )
    reply = resp.choices[0].message.content
    history.append({"role": "assistant", "content": reply})
    ctx.user_data["history"] = history[-30:]

    await update.message.reply_text(reply)

    name, service, date_str, time_str = extract_fields(user_txt + " " + reply)
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ: name={name!r}, service={service!r}, date={date_str!r}, time={time_str!r}")

    if all([name, service, date_str, time_str]):
        dt_full = f"{date_str} {time_str}"
        payload = {
            "fields": {
                "–ò–º—è": name,
                "–§–∞–º–∏–ª–∏—è": update.effective_user.last_name or "",
                "Username": update.effective_user.username or "",
                "Chat ID": str(update.effective_user.id),
                "–£—Å–ª—É–≥–∞": service,
                "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏": dt_full,
                "–°–æ–æ–±—â–µ–Ω–∏–µ": user_txt,
                "–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏": datetime.now().isoformat(),
            }
        }
        r = requests.post(AIRTABLE_URL, headers=AIRTABLE_HEADERS, json=payload)
        try:
            j = r.json()
        except:
            j = r.text
        print(f"üì§ Airtable response: {r.status_code} {j}")

        if r.status_code in (200, 201):
            await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã: {name}, ¬´{service}¬ª ‚Äî {dt_full}.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ ‚Äî –∂–¥—ë–º —É—Ç–æ—á–Ω–µ–Ω–∏–π.")

def main():
    print("üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook‚Ä¶")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    ext = RENDER_URL if RENDER_URL.startswith("http") else "https://" + RENDER_URL
    webhook = f"{ext}/webhook"
    print("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook:", webhook)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

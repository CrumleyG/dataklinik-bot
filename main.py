import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

DOCTORS_GROUP_ID = -1002529967465

openai = OpenAI(api_key=OPENAI_API_KEY)

with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

with open("services.json", "r", encoding="utf-8") as f:
    SERVICES = json.load(f)

BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "—Ö–æ—á—É –Ω–∞", "–Ω–∞ –ø—Ä–∏–µ–º", "–Ω–∞ –ø—Ä–∏—ë–º", "appointment", "–ø—Ä–∏—ë–º",
    "–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "—Ö–æ—á—É –ø–æ–ø–∞—Å—Ç—å", "–º–æ–≥—É –ª–∏ —è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è",
    "—Ö–æ—Ç–µ–ª –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—à–∏ –º–µ–Ω—è", "–∑–∞–ø–∏—à–∏—Å—å", "–≥–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONFIRM_WORDS = ["–≤—Å—ë –≤–µ—Ä–Ω–æ", "–≤—Å–µ –≤–µ—Ä–Ω–æ", "–¥–∞", "–æ–∫", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–≤–µ—Ä–Ω–æ", "–≥–æ—Ç–æ–≤–æ"]

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_confirm_intent(text):
    q = text.lower()
    return any(w in q for w in CONFIRM_WORDS)

def match_service(text):
    q = text.lower()
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å–ª—É–≥–∏
    for key, data in SERVICES.items():
        if data['–Ω–∞–∑–≤–∞–Ω–∏–µ'].lower() in q:
            return data['–Ω–∞–∑–≤–∞–Ω–∏–µ']
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º
        for kw in data.get('–∫–ª—é—á–∏', []):
            if kw.lower() in q:
                return data['–Ω–∞–∑–≤–∞–Ω–∏–µ']
    return None

def get_service_info(query, for_booking=False):
    q = query.lower()
    if for_booking:
        return None
    # –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if any(word in q for word in [
        "—É—Å–ª—É–≥", "–ø—Ä–∞–π—Å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω—ã", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "–ø–µ—Ä–µ—á–µ–Ω—å", "—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ", "–ø—Ä–∞–π—Å–ª–∏—Å—Ç"
    ]):
        result = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏:*"]
        for data in SERVICES.values():
            line = f"‚Äî *{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ({data['—Ü–µ–Ω–∞']})"
            result.append(line)
        return "\n".join(result)
    # –ï—Å–ª–∏ –ø—Ä–æ –æ–¥–Ω—É —É—Å–ª—É–≥—É (–Ω–æ –Ω–µ –ø—Ä–æ –∑–∞–ø–∏—Å—å)
    for key, data in SERVICES.items():
        if data['–Ω–∞–∑–≤–∞–Ω–∏–µ'].lower() in q:
            return f"*{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}*\n–¶–µ–Ω–∞: {data['—Ü–µ–Ω–∞']}"
        for kw in data.get('–∫–ª—é—á–∏', []):
            if kw.lower() in q:
                return f"*{data['–Ω–∞–∑–≤–∞–Ω–∏–µ']}*\n–¶–µ–Ω–∞: {data['—Ü–µ–Ω–∞']}"
    return None

def extract_fields(text):
    # –ò–º—è
    name = None
    match = re.search(r"(–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)", text)
    if match:
        name = match.group(2)
    # –£—Å–ª—É–≥–∞
    service = match_service(text)
    # –î–∞—Ç–∞
    date = None
    date_match = re.search(r'(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[.\-/]\d{1,2}[.\-/]\d{2,4})', text)
    if date_match:
        d = date_match.group(1)
        if "–∑–∞–≤—Ç—Ä–∞" in d:
            date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in d:
            date = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            date = d
    # –í—Ä–µ–º—è
    time_ = None
    time_match = re.search(r'\b(\d{1,2}[:.]\d{2})\b', text)
    if time_match:
        time_ = time_match.group(1).replace('.', ':')
    # –¢–µ–ª–µ—Ñ–æ–Ω
    phone = None
    phone_match = re.search(r'(\+?\d{7,15})', text)
    if phone_match:
        phone = phone_match.group(1)
    return {
        "–ò–º—è": name,
        "–£—Å–ª—É–≥–∞": service,
        "–î–∞—Ç–∞": date,
        "–í—Ä–µ–º—è": time_,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone,
    }

def is_form_complete(form):
    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    return all(form.get(k) for k in required)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data

    # 1. –ï—Å–ª–∏ –∏–¥—ë—Ç –∑–∞–ø–∏—Å—å, –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —É—Å–ª—É–≥–µ
    booking_intent = is_booking_intent(text)
    service_reply = get_service_info(text, for_booking=booking_intent)
    if service_reply:
        await update.message.reply_text(service_reply, parse_mode="Markdown")
        return

    # 2. –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    # 3. –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Ä–∞—á–∞–º!
    if is_form_complete(form):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        doctors_msg = (
            f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!*\n"
            f"–ò–º—è: {form['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(
            chat_id=DOCTORS_GROUP_ID,
            text=doctors_msg,
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}
        return

    # 4. –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ù–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ —á–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç "–≤—Å—ë –≤–µ—Ä–Ω–æ" –∏–ª–∏ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" ‚Äî —Ç–æ–∂–µ –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ —É–ª–æ–≤–∏–ª–∏—Å—å —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)
    if is_confirm_intent(text) and is_form_complete(form):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        doctors_msg = (
            f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–∞!*\n"
            f"–ò–º—è: {form['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
            f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(
            chat_id=DOCTORS_GROUP_ID,
            text=doctors_msg,
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}
        return

    # 5. –í–µ–¥—ë–º –¥–∞–ª—å—à–µ –¥–∏–∞–ª–æ–≥ (OpenAI)
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    messages = [
        {
            "role": "system",
            "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. "
                       "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç '–∑–∞–ø–∏—Å–∞—Ç—å', '–∑–∞–ø–∏—à–∏—Å—å', '—è —Ö–æ—á—É –Ω–∞ —É—Å–ª—É–≥—É', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–Ω–∞ –ø—Ä–∏—ë–º', '–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', —Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π —Å–ø—Ä–∞–≤–∫–æ–π –ø–æ —É—Å–ª—É–≥–µ, –∞ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–ø–∏—Å–∏. "
                       "–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–∑–Ω–∞—Ç—å –∏–º—è, —É—Å–ª—É–≥—É (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫–∏), –¥–∞—Ç—É, –≤—Ä–µ–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω."
                       "–ï—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–Ω–∏–∫–∏ (services.json)."
                       "–ù–µ –¥—É–±–ª–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—Å—ë –Ω–∞–ø–∏—Å–∞–ª."
        }
    ] + history[-10:]

    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç AI üòî")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

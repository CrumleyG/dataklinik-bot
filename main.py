import os
import re
import json
import gspread
import dateparser
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, filters
)
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL     = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT           = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
GROUP_CHAT_ID  = -1002529967465

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI ===
openai = OpenAI(api_key=OPENAI_API_KEY)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Sheets —á–µ—Ä–µ–∑ Secret File ===
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit").sheet1

# === –£—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–∫–∏ ===
SERVICES = {
    "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞ ‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ / –æ—Ç 2000 ‚Ç∏",
    "—Ä–µ–Ω—Ç–≥–µ–Ω": "–†–µ–Ω—Ç–≥–µ–Ω –∑—É–±–∞ ‚Äî –æ—Ç 3000 ‚Ç∏",
    "—á–∏—Å—Ç–∫–∞": "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤ (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–∏–≥–∏–µ–Ω–∞) ‚Äî –æ—Ç 8000 ‚Ç∏",
    "–æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ": "–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ ‚Äî –æ—Ç 30000 ‚Ç∏",
    "–∫–∞—Ä–∏–µ—Å": "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ ‚Äî –æ—Ç 10000 ‚Ç∏",
    "–ø–ª–æ–º–±–∞": "–ü–ª–æ–º–±–∞ —Å–≤–µ—Ç–æ–≤–∞—è ‚Äî –æ—Ç 12000 ‚Ç∏",
    "–ø—É–ª—å–ø–∏—Ç": "–õ–µ—á–µ–Ω–∏–µ –ø—É–ª—å–ø–∏—Ç–∞ ‚Äî –æ—Ç 18000 ‚Ç∏",
    "–¥–µ—Ç—Å–∫–∞—è": "–î–µ—Ç—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –æ—Ç 2000 ‚Ç∏",
    "—Ñ—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ": "–§—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑—É–±–æ–≤ ‚Äî –æ—Ç 6000 ‚Ç∏",
    "–∫–æ—Ä–æ–Ω–∫–∞": "–ö–æ—Ä–æ–Ω–∫–∞ –º–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞ ‚Äî –æ—Ç 35000 ‚Ç∏",
    "—Ü–∏—Ä–∫–æ–Ω–∏–π": "–¶–∏—Ä–∫–æ–Ω–∏–µ–≤–∞—è –∫–æ—Ä–æ–Ω–∫–∞ ‚Äî –æ—Ç 60000 ‚Ç∏",
    "–ø—Ä–æ—Ç–µ–∑": "–°—ä–µ–º–Ω—ã–π –ø—Ä–æ—Ç–µ–∑ ‚Äî –æ—Ç 45000 ‚Ç∏",
    "—É–¥–∞–ª–µ–Ω–∏–µ": "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ ‚Äî –æ—Ç 7000 ‚Ç∏",
    "–º—É–¥—Ä–æ—Å—Ç–∏": "–£–¥–∞–ª–µ–Ω–∏–µ –∑—É–±–∞ –º—É–¥—Ä–æ—Å—Ç–∏ ‚Äî –æ—Ç 15000 ‚Ç∏",
    "—Ä–µ–∑–µ–∫—Ü–∏—è": "–†–µ–∑–µ–∫—Ü–∏—è –∫–æ—Ä–Ω—è ‚Äî –æ—Ç 25000 ‚Ç∏",
    "–∏–º–ø–ª–∞–Ω—Ç": "–ò–º–ø–ª–∞–Ω—Ç ‚Äî –æ—Ç 120000 ‚Ç∏",
    "–±—Ä–µ–∫–µ—Ç—ã": "–ë—Ä–µ–∫–µ—Ç—ã ‚Äî –æ—Ç 150000 ‚Ç∏",
    "—ç–ª–∞–π–Ω–µ—Ä—ã": "–≠–ª–∞–π–Ω–µ—Ä—ã ‚Äî –æ—Ç 300000 ‚Ç∏"
}

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def extract_fields(text):
    name = re.search(r'(–∑–æ–≤—É—Ç|—è)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)', text)
    phone = re.search(r'(\+?\d{7,15})', text)
    time_ = re.search(r'(\d{1,2}:\d{2})', text)
    date = dateparser.parse(text, settings={"TIMEZONE": "Asia/Almaty", "TO_TIMEZONE": "Asia/Almaty", "RETURN_AS_TIMEZONE_AWARE": False})
    service = next((key for key in SERVICES if key in text.lower()), None)
    return {
        "–ò–º—è": name.group(2) if name else None,
        "–¢–µ–ª–µ—Ñ–æ–Ω": phone.group(1) if phone else None,
        "–í—Ä–µ–º—è": time_.group(1) if time_ else None,
        "–î–∞—Ç–∞": date.strftime("%d.%m.%Y") if date else None,
        "–£—Å–ª—É–≥–∞": SERVICES[service] if service else None
    }

# === –û—Ç–≤–µ—Ç –Ω–∞ /id ===
async def show_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Chat ID: `{update.message.chat_id}`", parse_mode='Markdown')

# === –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data
    history = user_data.get("history", [])
    history.append({"role": "user", "content": text})
    user_data["history"] = history[-20:]

    form = user_data.get("form", {})
    extracted = extract_fields(text)
    for k, v in extracted.items():
        if v:
            form[k] = v
    user_data["form"] = form

    # –û—Ç–≤–µ—Ç GPT
    messages = [{
        "role": "system",
        "content": "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ —É—Å–ª—É–≥–∏, —É—Ç–æ—á–Ω—è–π –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è (–∏–º—è, —É—Å–ª—É–≥—É, –¥–∞—Ç—É, –≤—Ä–µ–º—è, –Ω–æ–º–µ—Ä)."
    }] + history[-10:]
    try:
        completion = openai.chat.completions.create(model="gpt-4o", messages=messages)
        reply = completion.choices[0].message.content
    except Exception as e:
        print("‚ùå OpenAI Error:", e)
        return await update.message.reply_text("–û—à–∏–±–∫–∞ OpenAI")

    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    user_data["history"] = history[-20:]

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –ø–æ–ª–Ω–∞—è ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    required = ("–ò–º—è", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω")
    if all(form.get(k) for k in required):
        now = datetime.now().strftime("%d.%m.%Y %H:%M")
        row = [form["–ò–º—è"], form["–¢–µ–ª–µ—Ñ–æ–Ω"], form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"], form["–í—Ä–µ–º—è"], now]
        sheet.append_row(row)
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –°–ø–∞—Å–∏–±–æ üòä")
        user_data["form"] = {}

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –≤—Ä–∞—á–µ–π
        message = (
            f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n"
            f"–ò–º—è: {row[0]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {row[1]}\n"
            f"–£—Å–ª—É–≥–∞: {row[2]}\n"
            f"–î–∞—Ç–∞: {row[3]} –≤ {row[4]}"
        )
        await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("id", show_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"https://{RENDER_URL}/webhook" if not RENDER_URL.startswith("http") else f"{RENDER_URL}/webhook"
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()

import os
import re
import json
import gspread
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª—é—á–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
PORT = int(os.getenv("PORT", "10000").strip())
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
DOCTORS_GROUP_ID = -1002529967465

openai = OpenAI(api_key=OPENAI_API_KEY)

# --- Google Sheets ---
with open("/etc/secrets/GOOGLE_SHEETS_KEY", "r") as f:
    key_data = json.load(f)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(key_data, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1_w2CVitInb118oRGHgjsufuwsY4ks4H07aoJJMs_W5I/edit"
).sheet1

# --- –£—Å–ª—É–≥–∏ –∏ —Å–ª–æ—Ç—ã ---
with open("services.json", "r", encoding="utf-8") as f:
    SERVICES_DICT = json.load(f)
SERVICES = list(SERVICES_DICT.values())

CANCEL_KEYWORDS = ["–æ—Ç–º–µ–Ω–∏—Ç—å", "–æ—Ç–º–µ–Ω–∞", "—É–¥–∞–ª–∏—Ç—å", "–ø–æ–º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è"]
BOOKING_KEYWORDS = [
    "–∑–∞–ø–∏—Å", "–ø—Ä–∏—ë–º", "appointment", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
]
CONSULT_WORDS = ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "—É—Å–ª—É–≥–∏", "–∫–∞–∫–∏–µ –µ—Å—Ç—å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]

def is_cancel_intent(text):
    q = text.lower()
    return any(kw in q for kw in CANCEL_KEYWORDS)

def is_booking_intent(text):
    q = text.lower()
    return any(kw in q for kw in BOOKING_KEYWORDS)

def is_consult_intent(text):
    q = text.lower()
    return any(w in q for w in CONSULT_WORDS)

def match_service(text):
    q = text.lower()
    m = re.match(r"^\s*(\d+)\s*$", text)
    if m:
        idx = int(m.group(1)) - 1
        if 0 <= idx < len(SERVICES):
            return SERVICES[idx]["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].lower() in q:
            return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
        for kw in s.get("–∫–ª—é—á–∏", []):
            if kw.lower() in q:
                return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    for key, s in SERVICES_DICT.items():
        for kw in [s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]] + s.get("–∫–ª—é—á–∏", []):
            for w in kw.lower().split():
                if w in q or q in w:
                    return s["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
    return None

def build_services_list():
    lines = ["üìã *–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:*"]
    for i, s in enumerate(SERVICES, 1):
        lines.append(f"{i}. *{s['–Ω–∞–∑–≤–∞–Ω–∏–µ']}* ‚Äî {s['—Ü–µ–Ω–∞']}")
    return "\n".join(lines)

def extract_fields(text):
    data = {}
    m = re.search(r"(?:–∑–æ–≤—É—Ç|–∏–º—è|—è|–º–µ–Ω—è)[\s:]*([–ê-–ØA-Z][–∞-—èa-z—ë]+)", text, re.I)
    if m:
        data["–ò–º—è"] = m.group(1)
    m = re.search(r"(\+7\d{10}|8\d{10}|7\d{10}|\d{10,11})", text.replace(" ", ""))
    if m:
        phone = m.group(1)
        if phone.startswith("8"):
            phone = "+7" + phone[1:]
        elif phone.startswith("7") and len(phone) == 11:
            phone = "+7" + phone[1:]
        data["–¢–µ–ª–µ—Ñ–æ–Ω"] = phone
    svc = match_service(text)
    if svc:
        data["–£—Å–ª—É–≥–∞"] = svc
    m = re.search(r"(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[./-]\d{1,2}(?:[./-]\d{2,4})?)", text.lower())
    if m:
        d = m.group(1)
        now = datetime.now()
        if d == "—Å–µ–≥–æ–¥–Ω—è":
            data["–î–∞—Ç–∞"] = now.strftime("%d.%m.%Y")
        elif d == "–∑–∞–≤—Ç—Ä–∞":
            data["–î–∞—Ç–∞"] = (now + timedelta(days=1)).strftime("%d.%m.%Y")
        elif d == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
            data["–î–∞—Ç–∞"] = (now + timedelta(days=2)).strftime("%d.%m.%Y")
        else:
            for fmt in ("%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%d.%m", "%d/%m", "%d-%m"):
                try:
                    date_obj = datetime.strptime(d, fmt)
                    if date_obj.year < 2000:
                        date_obj = date_obj.replace(year=now.year)
                    data["–î–∞—Ç–∞"] = date_obj.strftime("%d.%m.%Y")
                    break
                except:
                    continue
            else:
                data["–î–∞—Ç–∞"] = d
    m = re.search(r"(\d{1,2})[:.\-](\d{2})", text)
    if m:
        data["–í—Ä–µ–º—è"] = f"{int(m.group(1)):02d}:{m.group(2)}"
    return data

def is_form_complete(form):
    return all(form.get(k) for k in ("–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–£—Å–ª—É–≥–∞", "–î–∞—Ç–∞", "–í—Ä–µ–º—è"))

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (–æ–±—Ä–∞–±–æ—Ç–∫–∞ int/str) ---
def get_taken_slots(—É—Å–ª—É–≥–∞, –¥–∞—Ç–∞):
    records = sheet.get_all_records()
    taken = []
    for rec in records:
        usluga_cell = str(rec.get("–£—Å–ª—É–≥–∞", "")).strip().lower()
        date_cell = str(rec.get("–î–∞—Ç–∞", "")).strip()
        if usluga_cell == —É—Å–ª—É–≥–∞.strip().lower() and date_cell == –¥–∞—Ç–∞.strip():
            time_cell = str(rec.get("–í—Ä–µ–º—è", "")).strip()
            taken.append(time_cell)
    return taken

def find_last_booking(chat_id):
    records = sheet.get_all_records()
    last = None
    for idx, rec in enumerate(records, start=2):
        if str(rec.get("Chat ID", "")) == str(chat_id):
            last = (idx, rec)
    return last if last else (None, None)

async def register_and_notify(form, update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    now_ts = datetime.now().strftime("%d.%m.%Y %H:%M")
    row = [
        form["–ò–º—è"],
        form["–¢–µ–ª–µ—Ñ–æ–Ω"],
        form["–£—Å–ª—É–≥–∞"],
        form["–î–∞—Ç–∞"],
        form["–í—Ä–µ–º—è"],
        now_ts,
        chat_id
    ]
    sheet.append_row(row)
    msg = (
        f"ü¶∑ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n"
        f"–ò–º—è: {form['–ò–º—è']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {form['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
        f"–£—Å–ª—É–≥–∞: {form['–£—Å–ª—É–≥–∞']}\n"
        f"–î–∞—Ç–∞: {form['–î–∞—Ç–∞']}\n"
        f"–í—Ä–µ–º—è: {form['–í—Ä–µ–º—è']}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, –∂–¥—ë–º –≤–∞—Å!")

async def handle_cancel_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    chat_id = update.effective_chat.id
    row_idx, rec = find_last_booking(chat_id)
    if not rec:
        await update.message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    if "–æ—Ç–º–µ–Ω–∏—Ç—å" in text or "—É–¥–∞–ª–∏—Ç—å" in text:
        sheet.delete_row(row_idx)
        msg = (
            f"‚ùå –ü–∞—Ü–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å:\n"
            f"{rec['–ò–º—è']}, {rec['–£—Å–ª—É–≥–∞']} –Ω–∞ {rec['–î–∞—Ç–∞']} {rec['–í—Ä–µ–º—è']}"
        )
        await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    svc = rec["–£—Å–ª—É–≥–∞"]
    date = rec["–î–∞—Ç–∞"]
    slots = []
    for key, s in SERVICES_DICT.items():
        if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
            slots = s.get("—Å–ª–æ—Ç—ã", [])
            break
    if not slots:
        await update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏.")
        return
    taken_slots = get_taken_slots(svc, date)
    free_slots = [t for t in slots if t not in taken_slots or t == rec.get("–í—Ä–µ–º—è")]
    if not free_slots:
        await update.message.reply_text("–í—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç—ã.")
        return
    text_slots = ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ª–æ—Ç:"]
    for i, t in enumerate(free_slots, 1):
        text_slots.append(f"{i}. {t}")
    await update.message.reply_text("\n".join(text_slots))
    context.user_data["awaiting_slot"] = {"row": row_idx, "slots": free_slots, "record": rec}

async def handle_slot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("awaiting_slot")
    if not state:
        return False
    text = update.message.text.strip()
    if not re.fullmatch(r"\d+", text):
        return False
    idx = int(text) - 1
    slots = state["slots"]
    if idx < 0 or idx >= len(slots):
        return False
    new_time = slots[idx]
    row_idx = state["row"]
    sheet.update_cell(row_idx, 5, new_time)
    rec = state["record"]
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time}.")
    msg = (
        f"‚úèÔ∏è –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–º–µ–Ω—è–ª –≤—Ä–µ–º—è:\n"
        f"{rec['–ò–º—è']}, —É—Å–ª—É–≥–∞ {rec['–£—Å–ª—É–≥–∞']}\n"
        f"–ù–æ–≤–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è: {rec['–î–∞—Ç–∞']} {new_time}"
    )
    await context.bot.send_message(DOCTORS_GROUP_ID, msg, parse_mode="Markdown")
    del context.user_data["awaiting_slot"]
    return True

async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%d.%m.%Y")
    records = sheet.get_all_records()
    for rec in records:
        if rec.get("–î–∞—Ç–∞") == today:
            chat_id = rec.get("Chat ID")
            svc = rec.get("–£—Å–ª—É–≥–∞")
            time_ = rec.get("–í—Ä–µ–º—è")
            await context.bot.send_message(
                chat_id,
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å—å –Ω–∞ *{svc}* –≤ *{time_}*.",
                parse_mode="Markdown"
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if is_cancel_intent(text):
        return await handle_cancel_or_edit(update, context)

    if context.user_data.get("awaiting_slot"):
        handled = await handle_slot_selection(update, context)
        if handled:
            return

    if is_consult_intent(text):
        return await update.message.reply_text(build_services_list(), parse_mode="Markdown")

    form = context.user_data.get("form", {})
    extracted = extract_fields(text)
    form.update(extracted)
    context.user_data["form"] = form

    if not form.get("–£—Å–ª—É–≥–∞"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n" + build_services_list(), parse_mode="Markdown")
        return
    if not form.get("–î–∞—Ç–∞"):
        await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 24.05, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)")
        return

    if not form.get("–í—Ä–µ–º—è"):
        svc = form["–£—Å–ª—É–≥–∞"]
        slots = []
        for key, s in SERVICES_DICT.items():
            if s["–Ω–∞–∑–≤–∞–Ω–∏–µ"].strip().lower() == svc.strip().lower():
                slots = s.get("—Å–ª–æ—Ç—ã", [])
                break
        taken_slots = get_taken_slots(svc, form["–î–∞—Ç–∞"])
        free_slots = [t for t in slots if t not in taken_slots]
        if not free_slots:
            await update.message.reply_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return
        slot_texts = [f"{i+1}. {t}" for i, t in enumerate(free_slots)]
        await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:\n" + "\n".join(slot_texts) + "\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 12:00).")
        context.user_data["awaiting_time"] = {"slots": free_slots}
        return

    if context.user_data.get("awaiting_time"):
        slots = context.user_data["awaiting_time"]["slots"]
        value = text.strip()
        slot_num = None
        if re.fullmatch(r"\d+", value):
            slot_num = int(value) - 1
            if 0 <= slot_num < len(slots):
                form["–í—Ä–µ–º—è"] = slots[slot_num]
        else:
            for t in slots:
                if value in t:
                    form["–í—Ä–µ–º—è"] = t
        context.user_data["form"] = form
        if form.get("–í—Ä–µ–º—è"):
            del context.user_data["awaiting_time"]
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ (–Ω–æ–º–µ—Ä –∏–ª–∏ –≤—Ä–µ–º—è).")
            return

    if not form.get("–¢–µ–ª–µ—Ñ–æ–Ω"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    if not form.get("–ò–º—è"):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return

    if is_form_complete(form):
        taken_slots = get_taken_slots(form["–£—Å–ª—É–≥–∞"], form["–î–∞—Ç–∞"])
        if form["–í—Ä–µ–º—è"] in taken_slots:
            await update.message.reply_text("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            form["–í—Ä–µ–º—è"] = ""
            context.user_data["form"] = form
            return
        await register_and_notify(form, update, context)
        context.user_data["form"] = {}
        return

    # --- –í–æ—Ç —Ç—É—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–æ–ª–∏ OpenAI ---
    history = context.user_data.get("history", [])
    history.append({"role": "user", "content": text})
    context.user_data["history"] = history[-20:]
    ai_system = (
        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤–∞—è, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏, —Ç–µ–±–µ 25 –ª–µ—Ç. "
        "–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Ç–µ–ø–ª–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. "
        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —É—Å–ª—É–≥–∏ –∏ –Ω–µ –ø–∏—à–∏ –ø—Ä–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ: —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º —Å–ø–∏—Å–∫–æ–º —É—Å–ª—É–≥:\n"
        + build_services_list() +
        "\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: —Å–æ–±—Ä–∞—Ç—å –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, —É—Å–ª—É–≥—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. "
        "–ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–µ–≥–æ-—Ç–æ ‚Äî —É—Ç–æ—á–Ω–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è –ª–∏—à–Ω–µ–≥–æ. "
        "–í—Å—ë –∑–∞–ø–∏—Å—ã–≤–∞–π –∫—Ä–∞—Ç–∫–æ, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –∏–∑–ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑, —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º —Ç–æ–Ω–æ–º. "
        "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –ø–æ —Ç–µ–º–µ, –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏—Å—å –∫ –∑–∞–ø–∏—Å–∏."
    )
    msgs = [{"role": "system", "content": ai_system}] + history[-10:]
    try:
        resp = openai.chat.completions.create(model="gpt-4o", messages=msgs)
        reply = resp.choices[0].message.content
    except Exception:
        reply = "–û—à–∏–±–∫–∞ AI ü§ñ"
    await update.message.reply_text(reply)
    history.append({"role": "assistant", "content": reply})
    context.user_data["history"] = history[-20:]

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler()

    async def start_scheduler(_: ContextTypes.DEFAULT_TYPE):
        scheduler.add_job(send_reminders, "cron", hour=9, minute=0, args=[app.bot])
        scheduler.start()

    app.post_init = start_scheduler

    RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()
    if RENDER_URL.startswith("https://"):
        RENDER_URL = RENDER_URL.replace("https://", "")
    if RENDER_URL.startswith("http://"):
        RENDER_URL = RENDER_URL.replace("http://", "")
    if RENDER_URL.endswith("/"):
        RENDER_URL = RENDER_URL.rstrip("/")
    webhook = f"https://{RENDER_URL}/webhook"

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook",
        webhook_url=webhook,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
